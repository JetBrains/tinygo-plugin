/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.jetbrains.tinygoplugin.lang.avrAsm;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import org.jetbrains.tinygoplugin.lang.avrAsm.psi.AvrAsmTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>AvrAsm.flex</tt>
 */
class AvrAsmLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_OPERANDS = 2;
  public static final int IN_PREPROCESSOR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15680 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13"+
    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31"+
    "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\1\40\2\13\1\41\2\13"+
    "\1\42\1\1\1\13\1\43\4\1\1\13\1\44\1\1\1\45\1\22\7\13\1\46\1\24\1\34\1\47\1"+
    "\35\1\50\1\51\1\52\1\46\1\16\1\53\1\47\1\35\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\22\1\35\1\62\1\63\1\64\1\46\1\65\1\66\1\47\1\35\1\62\1\67\1\70\1\46\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\57\1\1\1\100\1\101\1\35\1\102\1\103\1\104"+
    "\1\46\1\1\1\100\1\101\1\35\1\105\1\103\1\106\1\46\1\107\1\110\1\101\1\13\1"+
    "\37\1\111\1\112\1\46\1\113\1\114\1\115\1\13\1\116\1\117\1\120\1\57\1\121\1"+
    "\24\2\13\1\31\1\122\1\123\2\1\1\124\1\125\1\126\1\127\1\130\1\131\2\1\1\64"+
    "\1\132\1\123\1\133\1\134\1\13\1\135\1\24\1\136\1\134\1\13\1\135\1\137\3\1"+
    "\4\13\1\123\4\13\1\140\2\13\1\141\2\13\1\142\24\13\1\143\1\144\2\13\1\143"+
    "\2\13\1\145\1\146\1\14\3\13\1\146\3\13\1\37\2\1\1\13\1\1\5\13\1\147\1\24\45"+
    "\13\1\150\1\13\1\24\1\31\4\13\1\151\1\152\1\153\1\154\1\13\1\154\1\13\1\155"+
    "\1\153\1\156\5\13\1\157\1\123\1\1\1\160\1\123\5\13\1\26\2\13\1\31\4\13\1\60"+
    "\1\13\1\122\2\43\1\57\1\13\1\42\1\154\2\13\1\43\1\13\1\161\1\123\2\1\1\13"+
    "\1\43\3\13\1\122\1\13\1\150\2\123\1\162\1\122\4\1\4\13\1\43\1\123\1\163\1"+
    "\155\3\13\1\40\3\13\1\155\3\13\1\26\1\164\1\40\1\13\1\42\1\152\4\1\1\165\1"+
    "\13\1\166\17\13\1\167\21\13\1\147\2\13\1\147\1\170\1\13\1\42\3\13\1\171\1"+
    "\172\1\173\1\135\1\172\2\1\1\174\1\175\1\64\1\176\1\1\1\177\1\1\1\135\3\1"+
    "\2\13\1\64\1\200\1\201\1\202\1\203\1\204\1\1\2\13\1\152\62\1\1\205\2\13\1"+
    "\161\161\1\2\13\1\122\2\13\1\122\10\13\1\206\1\155\2\13\1\141\3\13\1\207\1"+
    "\175\1\13\1\210\4\211\2\13\2\1\1\175\35\1\1\212\1\1\1\24\1\213\1\24\4\13\1"+
    "\214\1\24\4\13\1\142\1\215\1\13\1\42\1\24\4\13\1\122\1\1\1\13\1\31\3\1\1\13"+
    "\40\1\133\13\1\60\4\1\135\13\1\60\2\1\10\13\1\135\4\1\2\13\1\42\20\13\1\135"+
    "\1\13\1\216\1\1\3\13\1\217\7\13\1\16\1\1\1\220\1\221\5\13\1\222\1\13\1\122"+
    "\1\26\3\1\1\220\2\13\1\26\1\1\3\13\1\155\4\13\1\60\1\123\1\13\1\223\1\40\1"+
    "\13\1\42\2\13\1\155\1\13\1\135\4\13\1\224\1\123\1\13\1\225\3\13\1\210\1\42"+
    "\1\123\1\13\1\115\4\13\1\32\1\160\1\13\1\226\1\227\1\230\1\211\2\13\1\142"+
    "\1\60\7\13\1\231\1\123\72\13\1\155\1\13\1\232\2\13\1\43\20\1\26\13\1\42\6"+
    "\13\1\161\2\1\1\210\1\233\1\35\1\234\1\235\6\13\1\16\1\1\1\236\25\13\1\42"+
    "\1\1\4\13\1\221\2\13\1\26\2\1\1\43\1\13\1\1\1\13\1\237\1\240\2\1\1\136\7\13"+
    "\1\135\1\1\1\123\1\24\1\241\1\24\1\31\1\205\4\13\1\122\1\242\1\243\2\1\1\244"+
    "\1\13\1\14\1\245\2\42\2\1\7\13\1\31\4\1\3\13\1\154\7\1\1\246\10\1\1\13\1\135"+
    "\3\13\2\64\1\1\2\13\1\1\1\13\1\31\2\13\1\31\1\13\1\42\2\13\1\247\1\250\2\1"+
    "\11\13\1\42\1\123\2\13\1\247\1\13\1\43\2\13\1\26\3\13\1\155\11\1\23\13\1\210"+
    "\1\13\1\60\1\26\11\1\1\251\2\13\1\252\1\13\1\60\1\13\1\210\1\13\1\122\4\1"+
    "\1\13\1\253\1\13\1\60\1\13\1\161\4\1\3\13\1\254\4\1\1\255\1\256\1\13\1\257"+
    "\2\1\1\13\1\135\1\13\1\135\2\1\1\134\1\13\1\210\1\1\3\13\1\60\1\13\1\60\1"+
    "\13\1\32\1\13\1\16\6\1\4\13\1\152\3\1\3\13\1\32\3\13\1\32\60\1\4\13\1\210"+
    "\1\1\1\57\1\175\3\13\1\31\1\1\1\13\1\152\1\123\3\13\1\260\1\1\2\13\1\261\4"+
    "\13\1\262\1\263\2\1\1\13\1\22\1\13\1\264\4\1\1\265\1\27\1\152\3\13\1\31\1"+
    "\123\1\34\1\47\1\35\1\62\1\67\1\266\1\267\1\154\10\1\4\13\1\31\1\123\2\1\4"+
    "\13\1\270\1\123\12\1\3\13\1\271\1\64\1\272\2\1\4\13\1\273\1\123\2\1\3\13\1"+
    "\26\1\123\3\1\1\13\1\102\1\43\1\123\26\1\4\13\1\123\1\175\34\1\3\13\1\152"+
    "\20\1\1\35\2\13\1\14\1\64\1\123\1\1\1\221\1\13\1\221\1\134\1\210\64\1\71\13"+
    "\1\161\6\1\6\13\1\122\1\1\14\13\1\155\53\1\2\13\1\122\75\1\44\13\1\210\33"+
    "\1\43\13\1\152\1\13\1\122\1\123\6\1\1\13\1\42\1\154\3\13\1\210\1\155\1\123"+
    "\1\236\1\274\1\13\67\1\4\13\1\154\2\13\1\122\1\175\1\13\4\1\1\64\1\1\76\13"+
    "\1\135\1\1\57\13\1\32\20\1\1\16\77\1\6\13\1\31\1\135\1\152\1\275\114\1\1\276"+
    "\1\277\1\300\1\1\1\301\11\1\1\302\33\1\5\13\1\136\3\13\1\153\1\303\1\304\1"+
    "\305\3\13\1\306\1\307\1\13\1\310\1\311\1\101\24\13\1\271\1\13\1\101\1\142"+
    "\1\13\1\142\1\13\1\136\1\13\1\136\1\122\1\13\1\122\1\13\1\35\1\13\1\35\1\13"+
    "\1\312\3\313\40\1\3\13\1\232\2\13\1\135\1\314\1\176\1\163\1\24\25\1\1\14\1"+
    "\222\1\315\75\1\14\13\1\154\1\210\2\1\4\13\1\31\1\123\112\1\1\305\1\13\1\316"+
    "\1\317\1\320\1\321\1\322\1\323\1\324\1\43\1\325\1\43\47\1\1\13\1\161\1\13"+
    "\1\161\1\13\1\161\47\1\55\13\1\210\2\1\103\13\1\154\15\13\1\42\150\13\1\16"+
    "\25\1\41\13\1\42\56\1\17\13\41\1");

  /* The ZZ_CMAP_A table has 3424 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\1\1\1\5\1\3\22\0\1\4\1\0\1\36\1\42\1\11\2\0\1\35\1\112\1\113"+
    "\1\10\1\107\1\111\1\110\1\14\1\7\1\32\1\30\1\105\2\104\2\30\1\106\2\27\1\43"+
    "\1\6\1\0\1\114\3\0\1\63\1\17\1\31\1\60\1\50\1\61\1\64\1\102\1\72\1\24\1\12"+
    "\1\100\1\25\1\71\1\74\1\26\1\54\1\20\1\47\1\51\1\55\1\12\1\70\1\37\1\40\1"+
    "\41\4\0\1\75\1\0\1\34\1\15\1\76\1\56\1\45\1\57\1\62\1\101\1\67\1\21\1\12\1"+
    "\77\1\22\1\66\1\73\1\23\1\52\1\16\1\44\1\46\1\53\1\12\1\65\1\33\1\103\1\12"+
    "\12\0\1\1\24\0\1\12\12\0\1\12\4\0\1\12\5\0\27\12\1\0\12\12\4\0\14\12\16\0"+
    "\5\12\7\0\1\12\1\0\1\12\1\0\5\12\1\0\2\12\2\0\4\12\1\0\1\12\6\0\1\12\1\0\3"+
    "\12\1\0\1\12\1\0\4\12\1\0\23\12\1\0\11\12\1\0\26\12\2\0\1\12\6\0\10\12\10"+
    "\0\16\12\1\0\1\12\1\0\2\12\1\0\2\12\1\0\1\12\10\0\13\12\5\0\3\12\15\0\12\13"+
    "\4\0\6\12\1\0\10\12\2\0\12\12\1\0\6\12\12\13\3\12\2\0\14\12\2\0\3\12\12\13"+
    "\14\12\4\0\1\12\5\0\16\12\2\0\14\12\4\0\5\12\1\0\10\12\6\0\20\12\2\0\12\13"+
    "\1\12\2\0\16\12\1\0\1\12\3\0\4\12\2\0\11\12\2\0\2\12\2\0\4\12\10\0\1\12\4"+
    "\0\2\12\1\0\1\12\1\0\3\12\1\0\6\12\4\0\2\12\1\0\2\12\1\0\2\12\1\0\2\12\2\0"+
    "\1\12\1\0\5\12\4\0\2\12\2\0\3\12\3\0\1\12\7\0\4\12\1\0\1\12\7\0\12\13\6\12"+
    "\13\0\3\12\1\0\11\12\1\0\2\12\1\0\2\12\1\0\5\12\2\0\12\12\1\0\3\12\1\0\3\12"+
    "\2\0\1\12\30\0\1\12\7\0\3\12\1\0\10\12\2\0\6\12\2\0\2\12\2\0\3\12\10\0\2\12"+
    "\4\0\2\12\1\0\1\12\1\0\1\12\20\0\2\12\1\0\6\12\3\0\3\12\1\0\4\12\3\0\2\12"+
    "\1\0\1\12\1\0\2\12\3\0\2\12\3\0\3\12\3\0\14\12\4\0\5\12\3\0\3\12\1\0\4\12"+
    "\2\0\1\12\6\0\1\12\10\0\4\12\1\0\10\12\1\0\3\12\1\0\30\12\3\0\10\12\1\0\3"+
    "\12\1\0\4\12\7\0\2\12\1\0\3\12\5\0\4\12\1\0\5\12\2\0\4\12\5\0\2\12\7\0\1\12"+
    "\2\0\2\12\16\0\3\12\1\0\10\12\1\0\7\12\1\0\3\12\1\0\5\12\5\0\4\12\7\0\1\12"+
    "\12\0\6\12\2\0\2\12\1\0\22\12\3\0\10\12\1\0\11\12\1\0\1\12\2\0\7\12\3\0\1"+
    "\12\4\0\6\12\1\0\1\12\1\0\10\12\2\0\2\12\14\0\17\12\1\0\12\13\7\0\2\12\1\0"+
    "\1\12\2\0\2\12\1\0\1\12\2\0\1\12\6\0\4\12\1\0\7\12\1\0\3\12\1\0\1\12\1\0\1"+
    "\12\2\0\2\12\1\0\15\12\1\0\3\12\2\0\5\12\1\0\1\12\1\0\6\12\2\0\12\13\2\0\4"+
    "\12\10\0\2\12\13\0\1\12\1\0\1\12\1\0\1\12\4\0\12\12\1\0\24\12\3\0\5\12\1\0"+
    "\12\12\6\0\1\12\11\0\12\13\4\12\2\0\6\12\1\0\1\12\5\0\1\12\2\0\13\12\1\0\15"+
    "\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0\1\12\1\0\4\12\2\0\7\12\1\0\1\12"+
    "\1\0\4\12\2\0\16\12\2\0\6\12\2\0\15\12\2\0\14\12\3\0\13\12\7\0\15\12\1\0\7"+
    "\12\13\0\4\12\14\0\1\12\1\0\2\12\14\0\4\12\3\0\1\12\4\0\2\12\15\0\3\12\2\0"+
    "\12\12\15\0\1\12\23\0\5\12\12\13\3\0\6\12\1\0\23\12\1\0\2\12\6\0\6\12\5\0"+
    "\15\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\6\12\1\0\7\12\1\0\1\12\3\0\3\12\1\0"+
    "\7\12\3\0\4\12\2\0\6\12\14\0\2\1\25\0\1\12\4\0\1\12\14\0\1\12\15\0\1\12\2"+
    "\0\1\12\4\0\1\12\2\0\12\12\1\0\1\12\3\0\5\12\6\0\1\12\1\0\1\12\1\0\1\12\1"+
    "\0\4\12\1\0\13\12\2\0\4\12\5\0\5\12\4\0\1\12\7\0\17\12\6\0\15\12\7\0\10\12"+
    "\11\0\7\12\1\0\7\12\6\0\3\12\11\0\5\12\2\0\5\12\3\0\7\12\2\0\2\12\2\0\3\12"+
    "\5\0\13\12\12\13\2\12\4\0\3\12\1\0\12\12\1\0\1\12\7\0\11\12\2\0\27\12\2\0"+
    "\15\12\3\0\1\12\1\0\1\12\2\0\1\12\16\0\1\12\12\13\5\12\3\0\5\12\12\0\6\12"+
    "\2\0\6\12\2\0\6\12\11\0\13\12\1\0\2\12\2\0\7\12\4\0\5\12\3\0\5\12\5\0\12\12"+
    "\1\0\5\12\1\0\1\12\1\0\2\12\1\0\2\12\1\0\12\12\3\0\15\12\3\0\2\12\30\0\16"+
    "\12\4\0\1\12\2\0\6\12\2\0\6\12\2\0\6\12\2\0\3\12\3\0\14\12\1\0\16\12\1\0\2"+
    "\12\1\0\1\12\15\0\1\12\2\0\4\12\4\0\10\12\1\0\5\12\12\0\6\12\2\0\1\12\1\0"+
    "\14\12\1\0\2\12\3\0\1\12\2\0\4\12\1\0\2\12\12\0\10\12\6\0\6\12\1\0\2\12\5"+
    "\0\10\12\1\0\3\12\1\0\13\12\4\0\3\12\4\0\6\12\1\0\12\13\4\12\2\0\1\12\11\0"+
    "\5\12\5\0\3\12\3\0\12\13\1\12\1\0\1\12\3\0\10\12\6\0\1\12\1\0\7\12\1\0\1\12"+
    "\1\0\4\12\1\0\2\12\6\0\1\12\5\0\7\12\2\0\7\12\3\0\6\12\1\0\1\12\10\0\6\12"+
    "\2\0\10\12\10\0\6\12\2\0\1\12\3\0\1\12\13\0\10\12\5\0\15\12\3\0\2\12\6\0\5"+
    "\12\3\0\6\12\10\0\10\12\2\0\7\12\16\0\4\12\4\0\3\12\15\0\1\12\2\0\2\12\2\0"+
    "\4\12\1\0\14\12\1\0\1\12\1\0\7\12\1\0\21\12\1\0\4\12\2\0\10\12\1\0\7\12\1"+
    "\0\14\12\1\0\4\12\1\0\5\12\1\0\1\12\3\0\11\12\1\0\10\12\2\0\22\13\5\0\1\12"+
    "\12\0\2\12\1\0\2\12\1\0\5\12\6\0\2\12\1\0\1\12\2\0\1\12\1\0\12\12\1\0\4\12"+
    "\1\0\1\12\1\0\1\12\6\0\1\12\4\0\1\12\1\0\1\12\1\0\1\12\1\0\3\12\1\0\2\12\1"+
    "\0\1\12\2\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\2\12\1\0\1\12\2\0"+
    "\4\12\1\0\7\12\1\0\4\12\1\0\4\12\1\0\1\12\1\0\12\12\1\0\5\12\1\0\3\12\1\0"+
    "\5\12\1\0\5\12");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\1\1\5\1\1"+
    "\5\5\1\1\1\5\1\1\1\3\1\1\1\5\1\1"+
    "\5\5\1\1\1\5\1\1\1\6\1\7\5\6\2\10"+
    "\1\6\2\1\1\11\20\6\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\2\0\1\3\1\20\1\21\3\0\13\22"+
    "\3\5\1\23\1\5\3\0\3\3\1\21\3\0\13\22"+
    "\3\5\2\24\1\5\1\10\1\6\1\25\2\6\1\26"+
    "\1\6\1\10\1\0\1\6\2\0\1\27\4\6\1\30"+
    "\15\6\1\0\1\20\2\0\10\22\1\31\4\22\2\32"+
    "\3\5\2\0\10\22\1\31\4\22\2\32\1\33\3\5"+
    "\4\6\1\34\13\6\1\0\1\20\1\32\2\22\1\35"+
    "\1\22\1\36\1\22\1\37\2\22\3\5\1\32\2\22"+
    "\1\35\1\22\1\36\1\22\1\37\2\22\3\5\5\6"+
    "\2\0\6\22\1\40\1\32\6\22\1\40\1\32\4\6"+
    "\1\0\2\22\1\41\4\22\1\41\2\22\1\42\2\6"+
    "\1\0\10\22\1\43";

  private static int [] zzUnpackAction() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\u0181\0\u01ce\0\u021b"+
    "\0\u0268\0\u02b5\0\u0302\0\u034f\0\u039c\0\u03e9\0\u0436\0\u0483"+
    "\0\u04d0\0\u051d\0\u056a\0\u05b7\0\u0604\0\u0651\0\u069e\0\u06eb"+
    "\0\u0738\0\u0785\0\u07d2\0\u081f\0\u086c\0\u08b9\0\u0906\0\u0953"+
    "\0\u09a0\0\u09ed\0\u0a3a\0\u0a87\0\u0ad4\0\u0b21\0\u0b6e\0\u0bbb"+
    "\0\u0c08\0\u0c55\0\u0ca2\0\u0cef\0\u0d3c\0\u0d89\0\u0a3a\0\u0dd6"+
    "\0\u0e23\0\u0e70\0\u0ebd\0\u0f0a\0\u0f57\0\u0fa4\0\u0ff1\0\u103e"+
    "\0\u108b\0\u10d8\0\u1125\0\u1172\0\u11bf\0\u120c\0\u1259\0\u021b"+
    "\0\u021b\0\u021b\0\u021b\0\u021b\0\u021b\0\u0134\0\u12a6\0\u12f3"+
    "\0\u1340\0\u021b\0\u03e9\0\u138d\0\u13da\0\u1427\0\u1474\0\u14c1"+
    "\0\u150e\0\u155b\0\u15a8\0\u15f5\0\u1642\0\u168f\0\u16dc\0\u1729"+
    "\0\u1776\0\u17c3\0\u1810\0\u05b7\0\u185d\0\u0651\0\u18aa\0\u0953"+
    "\0\u18f7\0\u1944\0\u1991\0\u0953\0\u0785\0\u19de\0\u1a2b\0\u1a78"+
    "\0\u1ac5\0\u1b12\0\u1b5f\0\u1bac\0\u1bf9\0\u1c46\0\u1c93\0\u1ce0"+
    "\0\u1d2d\0\u1d7a\0\u1dc7\0\u1e14\0\u1e61\0\u021b\0\u1eae\0\u1efb"+
    "\0\u09ed\0\u1f48\0\u0b21\0\u1f95\0\u1fe2\0\u0a3a\0\u202f\0\u207c"+
    "\0\u09ed\0\u20c9\0\u2116\0\u0d89\0\u021b\0\u2163\0\u21b0\0\u21fd"+
    "\0\u224a\0\u0a3a\0\u2297\0\u22e4\0\u2331\0\u237e\0\u23cb\0\u2418"+
    "\0\u2465\0\u24b2\0\u24ff\0\u254c\0\u2599\0\u25e6\0\u2633\0\u2680"+
    "\0\u26cd\0\u271a\0\u2767\0\u27b4\0\u2801\0\u284e\0\u289b\0\u28e8"+
    "\0\u2935\0\u2982\0\u29cf\0\u1427\0\u2a1c\0\u2a69\0\u2ab6\0\u2b03"+
    "\0\u1776\0\u039c\0\u2b50\0\u2b9d\0\u2bea\0\u2c37\0\u2c84\0\u2cd1"+
    "\0\u2d1e\0\u2d6b\0\u2db8\0\u2e05\0\u2e52\0\u2e9f\0\u2eec\0\u1a78"+
    "\0\u2f39\0\u2f86\0\u2fd3\0\u3020\0\u1dc7\0\u0738\0\u021b\0\u306d"+
    "\0\u30ba\0\u3107\0\u3154\0\u31a1\0\u31ee\0\u323b\0\u021b\0\u3288"+
    "\0\u32d5\0\u3322\0\u336f\0\u33bc\0\u3409\0\u3456\0\u34a3\0\u34f0"+
    "\0\u353d\0\u358a\0\u35d7\0\u3624\0\u03e9\0\u3671\0\u36be\0\u1427"+
    "\0\u370b\0\u1427\0\u3758\0\u1427\0\u37a5\0\u37f2\0\u383f\0\u388c"+
    "\0\u38d9\0\u0785\0\u3926\0\u3973\0\u1a78\0\u39c0\0\u1a78\0\u3a0d"+
    "\0\u1a78\0\u3a5a\0\u3aa7\0\u3af4\0\u3b41\0\u3b8e\0\u3bdb\0\u3c28"+
    "\0\u3c75\0\u3cc2\0\u3d0f\0\u021b\0\u3d5c\0\u3da9\0\u3df6\0\u3e43"+
    "\0\u3e90\0\u3edd\0\u3f2a\0\u383f\0\u2b50\0\u3f77\0\u3fc4\0\u4011"+
    "\0\u405e\0\u40ab\0\u40f8\0\u3af4\0\u306d\0\u4145\0\u4192\0\u41df"+
    "\0\u422c\0\u4279\0\u42c6\0\u4313\0\u1427\0\u4360\0\u43ad\0\u43fa"+
    "\0\u4447\0\u1a78\0\u4494\0\u44e1\0\u0a3a\0\u452e\0\u457b\0\u45c8"+
    "\0\u4615\0\u4662\0\u46af\0\u46fc\0\u4749\0\u4796\0\u47e3\0\u4830"+
    "\0\u0a3a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\0\2\11\2\12\1\13\1\14\1\10\2\15"+
    "\1\16\1\17\1\20\1\15\1\21\1\15\1\22\2\15"+
    "\1\23\2\15\2\16\1\15\1\16\2\15\2\10\3\15"+
    "\1\24\1\10\31\15\1\25\6\15\3\16\6\10\1\26"+
    "\1\0\2\11\1\27\1\12\1\13\1\30\1\26\2\31"+
    "\1\32\1\33\1\34\1\31\1\35\1\31\1\36\2\31"+
    "\1\37\2\31\2\32\1\31\1\32\2\31\2\26\3\31"+
    "\1\24\1\40\31\31\1\41\6\31\3\32\6\26\1\10"+
    "\1\0\2\11\2\12\1\13\1\14\1\10\1\42\1\43"+
    "\1\10\1\44\1\45\1\46\1\47\1\46\2\43\1\50"+
    "\2\43\1\51\2\52\1\43\1\53\1\43\1\54\1\55"+
    "\1\56\3\57\2\10\1\60\1\61\1\43\1\62\1\63"+
    "\1\43\1\64\1\43\1\64\1\43\1\65\1\66\1\67"+
    "\1\70\1\43\1\71\3\43\1\72\2\43\1\73\4\43"+
    "\1\74\1\75\1\76\1\77\1\43\3\52\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\10\1\0\2\11\2\12"+
    "\1\13\1\14\105\10\4\0\2\106\107\0\1\6\3\0"+
    "\1\6\1\0\107\6\7\0\1\107\224\0\2\11\111\0"+
    "\1\110\1\0\2\11\2\12\107\110\2\13\2\0\111\13"+
    "\7\0\1\13\1\111\115\0\10\15\1\22\2\15\1\23"+
    "\10\15\2\0\3\15\1\0\1\112\43\15\17\0\10\113"+
    "\1\114\2\113\1\115\10\113\2\0\3\113\1\0\1\112"+
    "\43\113\17\0\11\116\1\117\2\116\1\120\7\116\2\0"+
    "\3\116\1\0\1\112\1\121\1\122\1\116\1\123\1\124"+
    "\5\116\1\125\1\116\1\126\4\116\1\127\2\116\1\130"+
    "\16\116\17\0\5\15\1\131\2\15\1\22\2\15\1\23"+
    "\10\15\2\0\3\15\1\0\1\112\43\15\17\0\7\15"+
    "\1\131\1\22\2\15\1\23\10\15\2\0\3\15\1\0"+
    "\1\112\43\15\17\0\10\15\1\22\1\132\1\15\1\23"+
    "\10\15\2\0\3\15\1\0\1\112\43\15\17\0\10\15"+
    "\1\22\2\15\1\23\1\133\7\15\2\0\3\15\1\0"+
    "\1\112\43\15\17\0\24\134\2\0\3\134\2\0\43\134"+
    "\17\0\10\15\1\22\2\15\1\23\10\15\2\0\3\15"+
    "\1\0\1\112\31\15\1\135\11\15\6\0\1\136\3\0"+
    "\1\136\2\0\1\137\32\136\1\0\1\140\51\136\1\141"+
    "\1\0\2\11\1\27\1\12\1\110\1\142\32\141\1\110"+
    "\1\143\51\141\1\136\3\0\1\136\2\0\1\13\1\111"+
    "\31\136\1\0\1\140\52\136\3\0\1\136\2\0\1\137"+
    "\1\136\10\31\1\36\2\31\1\37\10\31\2\136\3\31"+
    "\1\0\1\144\43\31\7\136\3\0\1\136\2\0\1\137"+
    "\1\136\10\145\1\146\2\145\1\147\10\145\2\136\3\145"+
    "\1\0\1\144\43\145\7\136\3\0\1\136\2\0\1\137"+
    "\1\136\11\150\1\151\2\150\1\152\7\150\2\136\3\150"+
    "\1\0\1\144\1\153\1\154\1\150\1\155\1\156\5\150"+
    "\1\157\1\150\1\160\4\150\1\161\2\150\1\162\16\150"+
    "\7\136\3\0\1\136\2\0\1\137\1\136\5\31\1\163"+
    "\2\31\1\36\2\31\1\37\10\31\2\136\3\31\1\0"+
    "\1\144\43\31\7\136\3\0\1\136\2\0\1\137\1\136"+
    "\7\31\1\163\1\36\2\31\1\37\10\31\2\136\3\31"+
    "\1\0\1\144\43\31\7\136\3\0\1\136\2\0\1\137"+
    "\1\136\10\31\1\36\1\164\1\31\1\37\10\31\2\136"+
    "\3\31\1\0\1\144\43\31\7\136\3\0\1\136\2\0"+
    "\1\137\1\136\10\31\1\36\2\31\1\37\1\165\7\31"+
    "\2\136\3\31\1\0\1\144\43\31\7\136\2\166\1\167"+
    "\1\136\1\166\1\0\1\137\32\136\1\0\1\140\52\136"+
    "\3\0\1\136\2\0\1\137\1\136\10\31\1\36\2\31"+
    "\1\37\10\31\2\136\3\31\1\0\1\144\31\31\1\170"+
    "\11\31\6\136\15\0\1\171\1\0\1\171\7\0\4\171"+
    "\1\0\1\171\10\0\1\171\2\0\1\171\5\0\4\171"+
    "\1\0\1\171\12\0\1\171\5\0\3\171\17\0\1\44"+
    "\2\43\1\44\20\43\2\0\3\43\2\0\43\43\17\0"+
    "\24\44\2\0\3\44\2\0\43\44\17\0\1\44\2\43"+
    "\1\44\20\43\2\0\3\43\2\0\37\43\1\172\3\43"+
    "\17\0\1\44\2\43\1\44\12\43\2\173\1\43\1\173"+
    "\2\43\2\0\3\43\2\0\40\43\3\173\17\0\1\44"+
    "\2\43\1\44\20\43\2\0\1\43\1\174\1\43\2\0"+
    "\43\43\17\0\1\44\2\43\1\44\17\43\1\175\2\0"+
    "\3\43\2\0\32\43\1\176\10\43\17\0\1\44\2\43"+
    "\1\44\14\43\1\176\3\43\2\0\3\43\2\0\17\43"+
    "\1\177\23\43\35\0\2\52\1\0\1\52\51\0\3\52"+
    "\36\0\1\200\1\0\1\200\1\201\3\0\1\201\44\0"+
    "\3\200\17\0\1\44\2\43\1\44\1\202\17\43\2\0"+
    "\3\43\2\0\43\43\6\0\35\203\1\0\57\203\36\204"+
    "\1\205\56\204\11\0\1\44\2\43\1\44\20\43\2\0"+
    "\3\43\2\0\2\43\1\206\40\43\17\0\1\44\2\43"+
    "\1\44\16\43\1\207\1\43\2\0\3\43\2\0\43\43"+
    "\17\0\1\44\2\43\1\44\20\43\2\0\3\43\2\0"+
    "\5\43\1\210\35\43\17\0\1\44\2\43\1\44\20\43"+
    "\2\0\1\211\2\43\2\0\43\43\17\0\1\44\2\43"+
    "\1\44\20\43\2\0\3\43\2\0\42\43\1\212\17\0"+
    "\1\44\2\43\1\44\20\43\2\0\3\43\2\0\1\43"+
    "\1\213\41\43\17\0\1\44\2\43\1\44\1\43\1\214"+
    "\16\43\2\0\3\43\2\0\43\43\17\0\1\44\2\43"+
    "\1\44\20\43\2\0\3\43\2\0\4\43\1\215\36\43"+
    "\17\0\1\44\2\43\1\44\3\43\1\216\14\43\2\0"+
    "\3\43\2\0\43\43\17\0\1\44\2\43\1\44\2\43"+
    "\1\217\15\43\2\0\3\43\2\0\43\43\17\0\1\44"+
    "\2\43\1\44\20\43\2\0\3\43\2\0\22\43\1\220"+
    "\20\43\17\0\1\44\2\43\1\44\20\43\2\0\3\43"+
    "\2\0\25\43\1\221\15\43\17\0\1\44\2\43\1\44"+
    "\20\43\2\0\3\43\2\0\21\43\1\222\5\43\1\223"+
    "\13\43\17\0\1\44\2\43\1\44\20\43\2\0\3\43"+
    "\2\0\24\43\1\224\3\43\1\225\12\43\17\0\1\44"+
    "\2\43\1\44\20\43\2\0\3\43\2\0\21\43\1\222"+
    "\1\43\1\226\17\43\17\0\1\44\2\43\1\44\20\43"+
    "\2\0\3\43\2\0\24\43\1\224\1\43\1\227\14\43"+
    "\16\0\1\230\104\0\1\110\3\0\1\110\1\0\107\110"+
    "\10\111\1\231\104\111\11\0\10\113\1\114\1\232\1\113"+
    "\1\115\10\113\2\0\3\113\1\0\1\112\43\113\17\0"+
    "\10\113\1\114\2\113\1\115\1\233\7\113\2\0\3\113"+
    "\1\0\1\112\43\113\17\0\24\116\2\0\3\116\1\0"+
    "\1\112\43\116\17\0\24\116\2\0\3\116\1\0\1\112"+
    "\1\116\1\234\41\116\17\0\24\116\2\0\3\116\1\0"+
    "\1\112\4\116\1\235\36\116\17\0\24\116\2\0\3\116"+
    "\1\0\1\112\1\116\1\236\41\116\17\0\5\116\1\237"+
    "\16\116\2\0\3\116\1\0\1\112\6\116\1\240\34\116"+
    "\17\0\24\116\2\0\3\116\1\0\1\112\4\116\1\241"+
    "\36\116\17\0\7\116\1\242\14\116\2\0\3\116\1\0"+
    "\1\112\10\116\1\243\32\116\17\0\4\116\1\244\17\116"+
    "\2\0\3\116\1\0\1\112\1\116\1\245\41\116\17\0"+
    "\6\116\1\244\15\116\2\0\3\116\1\0\1\112\4\116"+
    "\1\246\36\116\17\0\23\116\1\247\2\0\3\116\1\0"+
    "\1\112\43\116\17\0\24\116\2\0\3\116\1\0\1\112"+
    "\17\116\1\250\23\116\17\0\24\251\2\0\3\251\1\0"+
    "\1\112\43\251\17\0\10\15\1\22\1\15\1\252\1\23"+
    "\10\15\2\0\3\15\1\0\1\112\43\15\17\0\10\15"+
    "\1\22\2\15\1\23\1\15\1\252\6\15\2\0\3\15"+
    "\1\0\1\112\43\15\17\0\10\253\1\254\2\253\1\255"+
    "\10\253\2\0\3\253\1\0\1\112\43\253\6\0\1\136"+
    "\3\0\1\136\4\0\31\136\1\0\1\140\51\136\1\141"+
    "\3\0\1\141\1\0\1\110\1\142\32\141\1\110\1\143"+
    "\52\141\3\0\1\141\1\0\3\110\31\141\1\110\1\143"+
    "\52\141\2\166\1\167\1\141\1\166\1\110\1\142\32\141"+
    "\1\110\1\143\51\141\1\136\3\0\1\136\2\0\1\137"+
    "\1\136\10\145\1\146\1\256\1\145\1\147\10\145\2\136"+
    "\3\145\1\0\1\144\43\145\7\136\3\0\1\136\2\0"+
    "\1\137\1\136\10\145\1\146\2\145\1\147\1\257\7\145"+
    "\2\136\3\145\1\0\1\144\43\145\7\136\3\0\1\136"+
    "\2\0\1\137\1\136\24\150\2\136\3\150\1\0\1\144"+
    "\43\150\7\136\3\0\1\136\2\0\1\137\1\136\24\150"+
    "\2\136\3\150\1\0\1\144\1\150\1\260\41\150\7\136"+
    "\3\0\1\136\2\0\1\137\1\136\24\150\2\136\3\150"+
    "\1\0\1\144\4\150\1\261\36\150\7\136\3\0\1\136"+
    "\2\0\1\137\1\136\24\150\2\136\3\150\1\0\1\144"+
    "\1\150\1\262\41\150\7\136\3\0\1\136\2\0\1\137"+
    "\1\136\5\150\1\263\16\150\2\136\3\150\1\0\1\144"+
    "\6\150\1\264\34\150\7\136\3\0\1\136\2\0\1\137"+
    "\1\136\24\150\2\136\3\150\1\0\1\144\4\150\1\265"+
    "\36\150\7\136\3\0\1\136\2\0\1\137\1\136\7\150"+
    "\1\266\14\150\2\136\3\150\1\0\1\144\10\150\1\267"+
    "\32\150\7\136\3\0\1\136\2\0\1\137\1\136\4\150"+
    "\1\270\17\150\2\136\3\150\1\0\1\144\1\150\1\271"+
    "\41\150\7\136\3\0\1\136\2\0\1\137\1\136\6\150"+
    "\1\270\15\150\2\136\3\150\1\0\1\144\4\150\1\272"+
    "\36\150\7\136\3\0\1\136\2\0\1\137\1\136\23\150"+
    "\1\273\2\136\3\150\1\0\1\144\43\150\7\136\3\0"+
    "\1\136\2\0\1\137\1\136\24\150\2\136\3\150\1\0"+
    "\1\144\17\150\1\274\23\150\7\136\3\0\1\136\2\0"+
    "\1\137\1\136\24\275\2\136\3\275\1\0\1\144\43\275"+
    "\7\136\3\0\1\136\2\0\1\137\1\136\10\31\1\36"+
    "\1\31\1\276\1\37\10\31\2\136\3\31\1\0\1\144"+
    "\43\31\7\136\3\0\1\136\2\0\1\137\1\136\10\31"+
    "\1\36\2\31\1\37\1\31\1\276\6\31\2\136\3\31"+
    "\1\0\1\144\43\31\6\136\2\0\1\277\112\0\1\136"+
    "\3\0\1\136\2\0\1\137\1\136\10\300\1\301\2\300"+
    "\1\302\10\300\2\136\3\300\1\0\1\144\43\300\6\136"+
    "\11\0\1\44\2\43\1\44\20\43\2\0\3\43\2\0"+
    "\2\43\1\303\40\43\17\0\1\44\2\43\1\44\20\43"+
    "\2\0\3\43\2\0\5\43\1\304\35\43\17\0\1\44"+
    "\2\43\1\44\20\43\2\0\3\43\2\0\16\43\1\305"+
    "\24\43\17\0\1\44\2\43\1\44\20\43\2\0\3\43"+
    "\2\0\20\43\1\306\22\43\36\0\1\200\1\0\1\200"+
    "\51\0\3\200\17\0\1\44\2\43\1\44\20\43\2\0"+
    "\3\43\2\0\1\212\42\43\43\0\1\307\70\0\1\44"+
    "\2\43\1\44\1\43\1\310\16\43\2\0\3\43\2\0"+
    "\43\43\17\0\1\44\2\43\1\44\6\43\1\311\11\43"+
    "\2\0\3\43\2\0\43\43\17\0\1\44\2\43\1\44"+
    "\3\43\1\312\14\43\2\0\3\43\2\0\43\43\17\0"+
    "\1\44\2\43\1\44\11\43\1\311\6\43\2\0\3\43"+
    "\2\0\43\43\17\0\1\44\2\43\1\44\20\43\2\0"+
    "\3\43\2\0\13\43\1\313\27\43\17\0\1\44\2\43"+
    "\1\44\17\43\1\314\2\0\3\43\2\0\43\43\17\0"+
    "\1\44\2\43\1\44\20\43\2\0\3\43\2\0\15\43"+
    "\1\315\25\43\17\0\1\44\2\43\1\44\20\43\2\0"+
    "\3\43\2\0\17\43\1\316\23\43\17\0\1\44\2\43"+
    "\1\44\20\43\2\0\3\43\2\0\3\43\1\212\37\43"+
    "\17\0\1\44\2\43\1\44\20\43\2\0\3\43\2\0"+
    "\2\43\1\212\40\43\17\0\1\44\2\43\1\44\20\43"+
    "\2\0\3\43\2\0\5\43\1\212\35\43\17\0\1\44"+
    "\2\43\1\44\1\43\1\317\16\43\2\0\3\43\2\0"+
    "\43\43\17\0\1\44\2\43\1\44\20\43\2\0\3\43"+
    "\2\0\16\43\1\311\2\43\1\212\21\43\17\0\1\44"+
    "\2\43\1\44\3\43\1\320\14\43\2\0\3\43\2\0"+
    "\43\43\17\0\1\44\2\43\1\44\20\43\2\0\3\43"+
    "\2\0\20\43\1\311\3\43\1\212\16\43\17\0\1\44"+
    "\2\43\1\44\20\43\2\0\3\43\2\0\16\43\1\321"+
    "\24\43\17\0\1\44\2\43\1\44\20\43\2\0\3\43"+
    "\2\0\20\43\1\322\22\43\6\0\10\230\1\323\104\230"+
    "\7\111\1\324\105\111\11\0\10\113\1\114\1\113\1\325"+
    "\1\115\10\113\2\0\3\113\1\0\1\112\43\113\17\0"+
    "\10\113\1\114\2\113\1\115\1\113\1\325\6\113\2\0"+
    "\3\113\1\0\1\112\43\113\17\0\24\116\2\0\3\116"+
    "\1\0\1\112\1\326\42\116\17\0\24\116\2\0\3\116"+
    "\1\0\1\112\3\116\1\327\37\116\17\0\24\116\2\0"+
    "\3\116\1\0\1\112\2\116\1\330\40\116\17\0\5\116"+
    "\1\331\16\116\2\0\3\116\1\0\1\112\43\116\17\0"+
    "\24\116\2\0\3\116\1\0\1\112\7\116\1\332\33\116"+
    "\17\0\24\116\2\0\3\116\1\0\1\112\5\116\1\330"+
    "\35\116\17\0\7\116\1\333\14\116\2\0\3\116\1\0"+
    "\1\112\43\116\17\0\24\116\2\0\3\116\1\0\1\112"+
    "\11\116\1\332\31\116\17\0\24\116\2\0\3\116\1\0"+
    "\1\112\13\116\1\334\27\116\17\0\24\116\2\0\3\116"+
    "\1\0\1\112\15\116\1\334\25\116\17\0\5\116\1\335"+
    "\16\116\2\0\3\116\1\0\1\112\43\116\17\0\7\116"+
    "\1\336\14\116\2\0\3\116\1\0\1\112\43\116\17\0"+
    "\10\253\1\254\2\253\1\255\10\253\2\0\3\253\1\0"+
    "\1\112\31\253\1\337\11\253\17\0\10\253\1\254\1\340"+
    "\1\253\1\255\10\253\2\0\3\253\1\0\1\112\31\253"+
    "\1\337\11\253\17\0\10\253\1\254\2\253\1\255\1\341"+
    "\7\253\2\0\3\253\1\0\1\112\31\253\1\337\11\253"+
    "\6\0\1\136\3\0\1\136\2\0\1\137\1\136\10\145"+
    "\1\146\1\145\1\342\1\147\10\145\2\136\3\145\1\0"+
    "\1\144\43\145\7\136\3\0\1\136\2\0\1\137\1\136"+
    "\10\145\1\146\2\145\1\147\1\145\1\342\6\145\2\136"+
    "\3\145\1\0\1\144\43\145\7\136\3\0\1\136\2\0"+
    "\1\137\1\136\24\150\2\136\3\150\1\0\1\144\1\343"+
    "\42\150\7\136\3\0\1\136\2\0\1\137\1\136\24\150"+
    "\2\136\3\150\1\0\1\144\3\150\1\344\37\150\7\136"+
    "\3\0\1\136\2\0\1\137\1\136\24\150\2\136\3\150"+
    "\1\0\1\144\2\150\1\345\40\150\7\136\3\0\1\136"+
    "\2\0\1\137\1\136\5\150\1\346\16\150\2\136\3\150"+
    "\1\0\1\144\43\150\7\136\3\0\1\136\2\0\1\137"+
    "\1\136\24\150\2\136\3\150\1\0\1\144\7\150\1\347"+
    "\33\150\7\136\3\0\1\136\2\0\1\137\1\136\24\150"+
    "\2\136\3\150\1\0\1\144\5\150\1\345\35\150\7\136"+
    "\3\0\1\136\2\0\1\137\1\136\7\150\1\350\14\150"+
    "\2\136\3\150\1\0\1\144\43\150\7\136\3\0\1\136"+
    "\2\0\1\137\1\136\24\150\2\136\3\150\1\0\1\144"+
    "\11\150\1\347\31\150\7\136\3\0\1\136\2\0\1\137"+
    "\1\136\24\150\2\136\3\150\1\0\1\144\13\150\1\351"+
    "\27\150\7\136\3\0\1\136\2\0\1\137\1\136\24\150"+
    "\2\136\3\150\1\0\1\144\15\150\1\351\25\150\7\136"+
    "\3\0\1\136\2\0\1\137\1\136\5\150\1\352\16\150"+
    "\2\136\3\150\1\0\1\144\43\150\7\136\3\0\1\136"+
    "\2\0\1\137\1\136\7\150\1\353\14\150\2\136\3\150"+
    "\1\0\1\144\43\150\7\136\3\0\1\136\2\0\1\137"+
    "\1\136\10\300\1\301\2\300\1\302\10\300\2\136\3\300"+
    "\1\0\1\144\31\300\1\354\11\300\7\136\3\0\1\136"+
    "\2\0\1\137\1\136\10\300\1\301\1\355\1\300\1\302"+
    "\10\300\2\136\3\300\1\0\1\144\31\300\1\354\11\300"+
    "\7\136\3\0\1\136\2\0\1\137\1\136\10\300\1\301"+
    "\2\300\1\302\1\356\7\300\2\136\3\300\1\0\1\144"+
    "\31\300\1\354\11\300\6\136\11\0\1\44\2\43\1\44"+
    "\20\43\2\0\3\43\2\0\1\43\1\357\41\43\17\0"+
    "\1\44\2\43\1\44\20\43\2\0\3\43\2\0\4\43"+
    "\1\357\36\43\17\0\1\44\2\43\1\44\20\43\2\0"+
    "\3\43\2\0\1\43\1\212\41\43\17\0\1\44\2\43"+
    "\1\44\20\43\2\0\3\43\2\0\4\43\1\212\36\43"+
    "\17\0\1\44\2\43\1\44\20\43\2\0\3\43\2\0"+
    "\33\43\1\360\7\43\17\0\1\44\2\43\1\44\20\43"+
    "\2\0\3\43\2\0\41\43\1\212\1\43\17\0\1\44"+
    "\2\43\1\44\20\43\2\0\3\43\2\0\34\43\1\361"+
    "\6\43\17\0\1\44\2\43\1\44\20\43\2\0\3\43"+
    "\2\0\23\43\1\362\17\43\17\0\1\44\2\43\1\44"+
    "\20\43\2\0\3\43\2\0\32\43\1\212\10\43\17\0"+
    "\1\44\2\43\1\44\20\43\2\0\3\43\2\0\26\43"+
    "\1\363\14\43\17\0\1\44\2\43\1\44\14\43\1\212"+
    "\3\43\2\0\3\43\2\0\43\43\17\0\1\44\2\43"+
    "\1\44\20\43\2\0\3\43\2\0\12\43\1\212\30\43"+
    "\17\0\1\44\2\43\1\44\20\43\2\0\3\43\2\0"+
    "\14\43\1\212\26\43\17\0\1\44\2\43\1\44\20\43"+
    "\2\0\3\43\2\0\35\43\1\212\5\43\17\0\1\44"+
    "\2\43\1\44\20\43\2\0\3\43\2\0\36\43\1\212"+
    "\4\43\6\0\7\230\1\364\1\365\104\230\1\324\3\0"+
    "\1\324\1\0\107\324\11\0\24\116\2\0\3\116\1\0"+
    "\1\112\1\366\42\116\17\0\24\116\2\0\3\116\1\0"+
    "\1\112\3\116\1\367\37\116\17\0\24\116\2\0\3\116"+
    "\1\0\1\112\27\116\1\370\13\116\17\0\24\116\2\0"+
    "\3\116\1\0\1\112\30\116\1\371\12\116\17\0\24\116"+
    "\2\0\3\116\1\0\1\112\22\116\1\372\20\116\17\0"+
    "\24\116\2\0\3\116\1\0\1\112\25\116\1\373\15\116"+
    "\17\0\10\253\1\254\2\253\1\255\10\253\2\0\3\253"+
    "\1\0\1\112\31\253\1\374\11\253\17\0\10\253\1\254"+
    "\1\253\1\375\1\255\10\253\2\0\3\253\1\0\1\112"+
    "\31\253\1\337\11\253\17\0\10\253\1\254\2\253\1\255"+
    "\1\253\1\375\6\253\2\0\3\253\1\0\1\112\31\253"+
    "\1\337\11\253\6\0\1\136\3\0\1\136\2\0\1\137"+
    "\1\136\24\150\2\136\3\150\1\0\1\144\1\376\42\150"+
    "\7\136\3\0\1\136\2\0\1\137\1\136\24\150\2\136"+
    "\3\150\1\0\1\144\3\150\1\377\37\150\7\136\3\0"+
    "\1\136\2\0\1\137\1\136\24\150\2\136\3\150\1\0"+
    "\1\144\27\150\1\u0100\13\150\7\136\3\0\1\136\2\0"+
    "\1\137\1\136\24\150\2\136\3\150\1\0\1\144\30\150"+
    "\1\u0101\12\150\7\136\3\0\1\136\2\0\1\137\1\136"+
    "\24\150\2\136\3\150\1\0\1\144\22\150\1\u0102\20\150"+
    "\7\136\3\0\1\136\2\0\1\137\1\136\24\150\2\136"+
    "\3\150\1\0\1\144\25\150\1\u0103\15\150\7\136\3\0"+
    "\1\136\2\0\1\137\1\136\10\300\1\301\2\300\1\302"+
    "\10\300\2\136\3\300\1\0\1\144\31\300\1\u0104\11\300"+
    "\7\136\3\0\1\136\2\0\1\137\1\136\10\300\1\301"+
    "\1\300\1\u0105\1\302\10\300\2\136\3\300\1\0\1\144"+
    "\31\300\1\354\11\300\7\136\3\0\1\136\2\0\1\137"+
    "\1\136\10\300\1\301\2\300\1\302\1\300\1\u0105\6\300"+
    "\2\136\3\300\1\0\1\144\31\300\1\354\11\300\6\136"+
    "\11\0\1\44\2\43\1\44\20\43\2\0\3\43\2\0"+
    "\40\43\1\212\2\43\17\0\1\44\2\43\1\44\20\43"+
    "\2\0\3\43\2\0\1\43\1\u0106\41\43\17\0\1\44"+
    "\2\43\1\44\20\43\2\0\3\43\2\0\4\43\1\u0107"+
    "\36\43\17\0\1\44\2\43\1\44\20\43\2\0\3\43"+
    "\2\0\22\43\1\u0108\20\43\17\0\1\44\2\43\1\44"+
    "\20\43\2\0\3\43\2\0\25\43\1\u0109\15\43\6\0"+
    "\7\230\1\u010a\1\323\104\230\11\0\23\116\1\u010b\2\0"+
    "\3\116\1\0\1\112\43\116\17\0\24\116\2\0\3\116"+
    "\1\0\1\112\17\116\1\u010c\23\116\17\0\5\116\1\u010d"+
    "\16\116\2\0\3\116\1\0\1\112\43\116\17\0\7\116"+
    "\1\u010d\14\116\2\0\3\116\1\0\1\112\43\116\17\0"+
    "\24\116\2\0\3\116\1\0\1\112\23\116\1\u010e\17\116"+
    "\17\0\24\116\2\0\3\116\1\0\1\112\26\116\1\u010f"+
    "\14\116\6\0\1\136\3\0\1\136\2\0\1\137\1\136"+
    "\23\150\1\u0110\2\136\3\150\1\0\1\144\43\150\7\136"+
    "\3\0\1\136\2\0\1\137\1\136\24\150\2\136\3\150"+
    "\1\0\1\144\17\150\1\u0111\23\150\7\136\3\0\1\136"+
    "\2\0\1\137\1\136\5\150\1\u0112\16\150\2\136\3\150"+
    "\1\0\1\144\43\150\7\136\3\0\1\136\2\0\1\137"+
    "\1\136\7\150\1\u0112\14\150\2\136\3\150\1\0\1\144"+
    "\43\150\7\136\3\0\1\136\2\0\1\137\1\136\24\150"+
    "\2\136\3\150\1\0\1\144\23\150\1\u0113\17\150\7\136"+
    "\3\0\1\136\2\0\1\137\1\136\24\150\2\136\3\150"+
    "\1\0\1\144\26\150\1\u0114\14\150\6\136\11\0\1\44"+
    "\2\43\1\44\20\43\2\0\3\43\2\0\22\43\1\u0115"+
    "\20\43\17\0\1\44\2\43\1\44\20\43\2\0\3\43"+
    "\2\0\25\43\1\u0115\15\43\17\0\1\44\2\43\1\44"+
    "\20\43\2\0\3\43\2\0\1\43\1\u0116\41\43\17\0"+
    "\1\44\2\43\1\44\20\43\2\0\3\43\2\0\4\43"+
    "\1\u0117\36\43\6\0\10\u010a\1\u0118\104\u010a\11\0\24\116"+
    "\2\0\3\116\1\0\1\112\16\116\1\u0119\24\116\17\0"+
    "\24\116\2\0\3\116\1\0\1\112\20\116\1\u011a\22\116"+
    "\17\0\24\116\2\0\3\116\1\0\1\112\22\116\1\u011b"+
    "\20\116\17\0\24\116\2\0\3\116\1\0\1\112\25\116"+
    "\1\u011c\15\116\6\0\1\136\3\0\1\136\2\0\1\137"+
    "\1\136\24\150\2\136\3\150\1\0\1\144\16\150\1\u011d"+
    "\24\150\7\136\3\0\1\136\2\0\1\137\1\136\24\150"+
    "\2\136\3\150\1\0\1\144\20\150\1\u011e\22\150\7\136"+
    "\3\0\1\136\2\0\1\137\1\136\24\150\2\136\3\150"+
    "\1\0\1\144\22\150\1\u011f\20\150\7\136\3\0\1\136"+
    "\2\0\1\137\1\136\24\150\2\136\3\150\1\0\1\144"+
    "\25\150\1\u0120\15\150\6\136\11\0\1\44\2\43\1\44"+
    "\20\43\2\0\3\43\2\0\12\43\1\u0121\30\43\17\0"+
    "\1\44\2\43\1\44\20\43\2\0\3\43\2\0\14\43"+
    "\1\u0121\26\43\6\0\7\u010a\1\0\105\u010a\11\0\24\116"+
    "\2\0\3\116\1\0\1\112\1\116\1\u010d\41\116\17\0"+
    "\24\116\2\0\3\116\1\0\1\112\4\116\1\u010d\36\116"+
    "\17\0\24\116\2\0\3\116\1\0\1\112\16\116\1\u010d"+
    "\24\116\17\0\24\116\2\0\3\116\1\0\1\112\20\116"+
    "\1\u010d\22\116\6\0\1\136\3\0\1\136\2\0\1\137"+
    "\1\136\24\150\2\136\3\150\1\0\1\144\1\150\1\u0112"+
    "\41\150\7\136\3\0\1\136\2\0\1\137\1\136\24\150"+
    "\2\136\3\150\1\0\1\144\4\150\1\u0112\36\150\7\136"+
    "\3\0\1\136\2\0\1\137\1\136\24\150\2\136\3\150"+
    "\1\0\1\144\16\150\1\u0112\24\150\7\136\3\0\1\136"+
    "\2\0\1\137\1\136\24\150\2\136\3\150\1\0\1\144"+
    "\20\150\1\u0112\22\150\6\136";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18557];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\1\1\0\1\11\67\1\6\11\1\1\1\0"+
    "\2\1\1\11\3\0\20\1\3\0\4\1\3\0\16\1"+
    "\1\11\12\1\1\0\1\1\2\0\1\11\24\1\2\0"+
    "\22\1\2\0\17\1\1\11\7\1\1\11\13\1\1\0"+
    "\40\1\1\11\43\1\1\0\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AvrAsmLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 36: break;
          case 2: 
            { yybegin(YYINITIAL);      return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 37: break;
          case 3: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 4;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 5;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 38: break;
          case 4: 
            { yybegin(YYINITIAL);      return AvrAsmTypes.LINE_COMMENT;
            } 
            // fall through
          case 39: break;
          case 5: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.MNEMONIC;
            } 
            // fall through
          case 40: break;
          case 6: 
            { return AvrAsmTypes.IDENTIFIER;
            } 
            // fall through
          case 41: break;
          case 7: 
            { return AvrAsmTypes.SYMBOL_IDENTIFIER;
            } 
            // fall through
          case 42: break;
          case 8: 
            { return AvrAsmTypes.INTEGER;
            } 
            // fall through
          case 43: break;
          case 9: 
            { return AvrAsmTypes.INDIRECT;
            } 
            // fall through
          case 44: break;
          case 10: 
            { return AvrAsmTypes.PLUS;
            } 
            // fall through
          case 45: break;
          case 11: 
            { return AvrAsmTypes.MINUS;
            } 
            // fall through
          case 46: break;
          case 12: 
            { return AvrAsmTypes.COMMA;
            } 
            // fall through
          case 47: break;
          case 13: 
            { return AvrAsmTypes.L_PAREN;
            } 
            // fall through
          case 48: break;
          case 14: 
            { return AvrAsmTypes.R_PAREN;
            } 
            // fall through
          case 49: break;
          case 15: 
            { return AvrAsmTypes.EQUAL;
            } 
            // fall through
          case 50: break;
          case 16: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 6;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 5;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return AvrAsmTypes.BLOCK_COMMENT;
            } 
            // fall through
          case 51: break;
          case 17: 
            { return AvrAsmTypes.LABEL;
            } 
            // fall through
          case 52: break;
          case 18: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.GENERIC_DIRECTIVE;
            } 
            // fall through
          case 53: break;
          case 19: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.PREPROCESSOR_NAME;
            } 
            // fall through
          case 54: break;
          case 20: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return AvrAsmTypes.LABEL;
            } 
            // fall through
          case 55: break;
          case 21: 
            { return AvrAsmTypes.REGISTER;
            } 
            // fall through
          case 56: break;
          case 22: 
            { return AvrAsmTypes.PC;
            } 
            // fall through
          case 57: break;
          case 23: 
            { return AvrAsmTypes.STRING;
            } 
            // fall through
          case 58: break;
          case 24: 
            { return AvrAsmTypes.FUNC;
            } 
            // fall through
          case 59: break;
          case 25: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.DB_DIRECTIVE;
            } 
            // fall through
          case 60: break;
          case 26: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.BR_MNEMONIC;
            } 
            // fall through
          case 61: break;
          case 27: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return AvrAsmTypes.LABEL;
            } 
            // fall through
          case 62: break;
          case 28: 
            { return AvrAsmTypes.CHAR;
            } 
            // fall through
          case 63: break;
          case 29: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.SET_DIRECTIVE;
            } 
            // fall through
          case 64: break;
          case 30: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.EQU_DIRECTIVE;
            } 
            // fall through
          case 65: break;
          case 31: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.DEF_DIRECTIVE;
            } 
            // fall through
          case 66: break;
          case 32: 
            { return AvrAsmTypes.MACROS_NAME;
            } 
            // fall through
          case 67: break;
          case 33: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.REPORT_DIRECTIVE;
            } 
            // fall through
          case 68: break;
          case 34: 
            { return AvrAsmTypes.STRLEN_FUNC;
            } 
            // fall through
          case 69: break;
          case 35: 
            { return AvrAsmTypes.DEFINED_FUNC;
            } 
            // fall through
          case 70: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
