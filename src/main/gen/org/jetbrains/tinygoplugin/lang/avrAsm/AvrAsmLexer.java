/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.jetbrains.tinygoplugin.lang.avrAsm;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import org.jetbrains.tinygoplugin.lang.avrAsm.psi.AvrAsmTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>AvrAsm.flex</tt>
 */
class AvrAsmLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_OPERANDS = 2;
  public static final int IN_PREPROCESSOR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15680 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13"+
    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31"+
    "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\1\40\2\13\1\41\2\13"+
    "\1\42\1\1\1\13\1\43\4\1\1\13\1\44\1\1\1\45\1\22\7\13\1\46\1\24\1\34\1\47\1"+
    "\35\1\50\1\51\1\52\1\46\1\16\1\53\1\47\1\35\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\22\1\35\1\62\1\63\1\64\1\46\1\65\1\66\1\47\1\35\1\62\1\67\1\70\1\46\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\57\1\1\1\100\1\101\1\35\1\102\1\103\1\104"+
    "\1\46\1\1\1\100\1\101\1\35\1\105\1\103\1\106\1\46\1\107\1\110\1\101\1\13\1"+
    "\37\1\111\1\112\1\46\1\113\1\114\1\115\1\13\1\116\1\117\1\120\1\57\1\121\1"+
    "\24\2\13\1\31\1\122\1\123\2\1\1\124\1\125\1\126\1\127\1\130\1\131\2\1\1\64"+
    "\1\132\1\123\1\133\1\134\1\13\1\135\1\24\1\136\1\134\1\13\1\135\1\137\3\1"+
    "\4\13\1\123\4\13\1\140\2\13\1\141\2\13\1\142\24\13\1\143\1\144\2\13\1\143"+
    "\2\13\1\145\1\146\1\14\3\13\1\146\3\13\1\37\2\1\1\13\1\1\5\13\1\147\1\24\45"+
    "\13\1\150\1\13\1\24\1\31\4\13\1\151\1\152\1\153\1\154\1\13\1\154\1\13\1\155"+
    "\1\153\1\156\5\13\1\157\1\123\1\1\1\160\1\123\5\13\1\26\2\13\1\31\4\13\1\60"+
    "\1\13\1\122\2\43\1\57\1\13\1\42\1\154\2\13\1\43\1\13\1\161\1\123\2\1\1\13"+
    "\1\43\3\13\1\122\1\13\1\150\2\123\1\162\1\122\4\1\4\13\1\43\1\123\1\163\1"+
    "\155\3\13\1\40\3\13\1\155\3\13\1\26\1\164\1\40\1\13\1\42\1\152\4\1\1\165\1"+
    "\13\1\166\17\13\1\167\21\13\1\147\2\13\1\147\1\170\1\13\1\42\3\13\1\171\1"+
    "\172\1\173\1\135\1\172\2\1\1\174\1\175\1\64\1\176\1\1\1\177\1\1\1\135\3\1"+
    "\2\13\1\64\1\200\1\201\1\202\1\203\1\204\1\1\2\13\1\152\62\1\1\205\2\13\1"+
    "\161\161\1\2\13\1\122\2\13\1\122\10\13\1\206\1\155\2\13\1\141\3\13\1\207\1"+
    "\175\1\13\1\210\4\211\2\13\2\1\1\175\35\1\1\212\1\1\1\24\1\213\1\24\4\13\1"+
    "\214\1\24\4\13\1\142\1\215\1\13\1\42\1\24\4\13\1\122\1\1\1\13\1\31\3\1\1\13"+
    "\40\1\133\13\1\60\4\1\135\13\1\60\2\1\10\13\1\135\4\1\2\13\1\42\20\13\1\135"+
    "\1\13\1\216\1\1\3\13\1\217\7\13\1\16\1\1\1\220\1\221\5\13\1\222\1\13\1\122"+
    "\1\26\3\1\1\220\2\13\1\26\1\1\3\13\1\155\4\13\1\60\1\123\1\13\1\223\1\40\1"+
    "\13\1\42\2\13\1\155\1\13\1\135\4\13\1\224\1\123\1\13\1\225\3\13\1\210\1\42"+
    "\1\123\1\13\1\115\4\13\1\32\1\160\1\13\1\226\1\227\1\230\1\211\2\13\1\142"+
    "\1\60\7\13\1\231\1\123\72\13\1\155\1\13\1\232\2\13\1\43\20\1\26\13\1\42\6"+
    "\13\1\161\2\1\1\210\1\233\1\35\1\234\1\235\6\13\1\16\1\1\1\236\25\13\1\42"+
    "\1\1\4\13\1\221\2\13\1\26\2\1\1\43\1\13\1\1\1\13\1\237\1\240\2\1\1\136\7\13"+
    "\1\135\1\1\1\123\1\24\1\241\1\24\1\31\1\205\4\13\1\122\1\242\1\243\2\1\1\244"+
    "\1\13\1\14\1\245\2\42\2\1\7\13\1\31\4\1\3\13\1\154\7\1\1\246\10\1\1\13\1\135"+
    "\3\13\2\64\1\1\2\13\1\1\1\13\1\31\2\13\1\31\1\13\1\42\2\13\1\247\1\250\2\1"+
    "\11\13\1\42\1\123\2\13\1\247\1\13\1\43\2\13\1\26\3\13\1\155\11\1\23\13\1\210"+
    "\1\13\1\60\1\26\11\1\1\251\2\13\1\252\1\13\1\60\1\13\1\210\1\13\1\122\4\1"+
    "\1\13\1\253\1\13\1\60\1\13\1\161\4\1\3\13\1\254\4\1\1\255\1\256\1\13\1\257"+
    "\2\1\1\13\1\135\1\13\1\135\2\1\1\134\1\13\1\210\1\1\3\13\1\60\1\13\1\60\1"+
    "\13\1\32\1\13\1\16\6\1\4\13\1\152\3\1\3\13\1\32\3\13\1\32\60\1\4\13\1\210"+
    "\1\1\1\57\1\175\3\13\1\31\1\1\1\13\1\152\1\123\3\13\1\260\1\1\2\13\1\261\4"+
    "\13\1\262\1\263\2\1\1\13\1\22\1\13\1\264\4\1\1\265\1\27\1\152\3\13\1\31\1"+
    "\123\1\34\1\47\1\35\1\62\1\67\1\266\1\267\1\154\10\1\4\13\1\31\1\123\2\1\4"+
    "\13\1\270\1\123\12\1\3\13\1\271\1\64\1\272\2\1\4\13\1\273\1\123\2\1\3\13\1"+
    "\26\1\123\3\1\1\13\1\102\1\43\1\123\26\1\4\13\1\123\1\175\34\1\3\13\1\152"+
    "\20\1\1\35\2\13\1\14\1\64\1\123\1\1\1\221\1\13\1\221\1\134\1\210\64\1\71\13"+
    "\1\161\6\1\6\13\1\122\1\1\14\13\1\155\53\1\2\13\1\122\75\1\44\13\1\210\33"+
    "\1\43\13\1\152\1\13\1\122\1\123\6\1\1\13\1\42\1\154\3\13\1\210\1\155\1\123"+
    "\1\236\1\274\1\13\67\1\4\13\1\154\2\13\1\122\1\175\1\13\4\1\1\64\1\1\76\13"+
    "\1\135\1\1\57\13\1\32\20\1\1\16\77\1\6\13\1\31\1\135\1\152\1\275\114\1\1\276"+
    "\1\277\1\300\1\1\1\301\11\1\1\302\33\1\5\13\1\136\3\13\1\153\1\303\1\304\1"+
    "\305\3\13\1\306\1\307\1\13\1\310\1\311\1\101\24\13\1\271\1\13\1\101\1\142"+
    "\1\13\1\142\1\13\1\136\1\13\1\136\1\122\1\13\1\122\1\13\1\35\1\13\1\35\1\13"+
    "\1\312\3\313\40\1\3\13\1\232\2\13\1\135\1\314\1\176\1\163\1\24\25\1\1\14\1"+
    "\222\1\315\75\1\14\13\1\154\1\210\2\1\4\13\1\31\1\123\112\1\1\305\1\13\1\316"+
    "\1\317\1\320\1\321\1\322\1\323\1\324\1\43\1\325\1\43\47\1\1\13\1\161\1\13"+
    "\1\161\1\13\1\161\47\1\55\13\1\210\2\1\103\13\1\154\15\13\1\42\150\13\1\16"+
    "\25\1\41\13\1\42\56\1\17\13\41\1");

  /* The ZZ_CMAP_A table has 3424 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\1\1\1\5\1\3\22\0\1\4\1\107\1\36\1\42\1\11\1\0\1\116\1\35\1\122"+
    "\1\123\1\10\1\111\1\121\1\112\1\14\1\7\1\32\1\30\1\105\2\104\2\30\1\106\2"+
    "\27\1\43\1\6\1\113\1\115\1\114\2\0\1\63\1\17\1\31\1\60\1\50\1\61\1\64\1\102"+
    "\1\72\1\24\1\12\1\100\1\25\1\71\1\74\1\26\1\54\1\20\1\47\1\51\1\55\1\12\1"+
    "\70\1\37\1\40\1\41\3\0\1\117\1\75\1\0\1\34\1\15\1\76\1\56\1\45\1\57\1\62\1"+
    "\101\1\67\1\21\1\12\1\77\1\22\1\66\1\73\1\23\1\52\1\16\1\44\1\46\1\53\1\12"+
    "\1\65\1\33\1\103\1\12\1\0\1\120\1\0\1\110\6\0\1\1\24\0\1\12\12\0\1\12\4\0"+
    "\1\12\5\0\27\12\1\0\12\12\4\0\14\12\16\0\5\12\7\0\1\12\1\0\1\12\1\0\5\12\1"+
    "\0\2\12\2\0\4\12\1\0\1\12\6\0\1\12\1\0\3\12\1\0\1\12\1\0\4\12\1\0\23\12\1"+
    "\0\11\12\1\0\26\12\2\0\1\12\6\0\10\12\10\0\16\12\1\0\1\12\1\0\2\12\1\0\2\12"+
    "\1\0\1\12\10\0\13\12\5\0\3\12\15\0\12\13\4\0\6\12\1\0\10\12\2\0\12\12\1\0"+
    "\6\12\12\13\3\12\2\0\14\12\2\0\3\12\12\13\14\12\4\0\1\12\5\0\16\12\2\0\14"+
    "\12\4\0\5\12\1\0\10\12\6\0\20\12\2\0\12\13\1\12\2\0\16\12\1\0\1\12\3\0\4\12"+
    "\2\0\11\12\2\0\2\12\2\0\4\12\10\0\1\12\4\0\2\12\1\0\1\12\1\0\3\12\1\0\6\12"+
    "\4\0\2\12\1\0\2\12\1\0\2\12\1\0\2\12\2\0\1\12\1\0\5\12\4\0\2\12\2\0\3\12\3"+
    "\0\1\12\7\0\4\12\1\0\1\12\7\0\12\13\6\12\13\0\3\12\1\0\11\12\1\0\2\12\1\0"+
    "\2\12\1\0\5\12\2\0\12\12\1\0\3\12\1\0\3\12\2\0\1\12\30\0\1\12\7\0\3\12\1\0"+
    "\10\12\2\0\6\12\2\0\2\12\2\0\3\12\10\0\2\12\4\0\2\12\1\0\1\12\1\0\1\12\20"+
    "\0\2\12\1\0\6\12\3\0\3\12\1\0\4\12\3\0\2\12\1\0\1\12\1\0\2\12\3\0\2\12\3\0"+
    "\3\12\3\0\14\12\4\0\5\12\3\0\3\12\1\0\4\12\2\0\1\12\6\0\1\12\10\0\4\12\1\0"+
    "\10\12\1\0\3\12\1\0\30\12\3\0\10\12\1\0\3\12\1\0\4\12\7\0\2\12\1\0\3\12\5"+
    "\0\4\12\1\0\5\12\2\0\4\12\5\0\2\12\7\0\1\12\2\0\2\12\16\0\3\12\1\0\10\12\1"+
    "\0\7\12\1\0\3\12\1\0\5\12\5\0\4\12\7\0\1\12\12\0\6\12\2\0\2\12\1\0\22\12\3"+
    "\0\10\12\1\0\11\12\1\0\1\12\2\0\7\12\3\0\1\12\4\0\6\12\1\0\1\12\1\0\10\12"+
    "\2\0\2\12\14\0\17\12\1\0\12\13\7\0\2\12\1\0\1\12\2\0\2\12\1\0\1\12\2\0\1\12"+
    "\6\0\4\12\1\0\7\12\1\0\3\12\1\0\1\12\1\0\1\12\2\0\2\12\1\0\15\12\1\0\3\12"+
    "\2\0\5\12\1\0\1\12\1\0\6\12\2\0\12\13\2\0\4\12\10\0\2\12\13\0\1\12\1\0\1\12"+
    "\1\0\1\12\4\0\12\12\1\0\24\12\3\0\5\12\1\0\12\12\6\0\1\12\11\0\12\13\4\12"+
    "\2\0\6\12\1\0\1\12\5\0\1\12\2\0\13\12\1\0\15\12\1\0\4\12\2\0\7\12\1\0\1\12"+
    "\1\0\4\12\2\0\1\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0\16\12\2\0\6\12"+
    "\2\0\15\12\2\0\14\12\3\0\13\12\7\0\15\12\1\0\7\12\13\0\4\12\14\0\1\12\1\0"+
    "\2\12\14\0\4\12\3\0\1\12\4\0\2\12\15\0\3\12\2\0\12\12\15\0\1\12\23\0\5\12"+
    "\12\13\3\0\6\12\1\0\23\12\1\0\2\12\6\0\6\12\5\0\15\12\1\0\1\12\1\0\1\12\1"+
    "\0\1\12\1\0\6\12\1\0\7\12\1\0\1\12\3\0\3\12\1\0\7\12\3\0\4\12\2\0\6\12\14"+
    "\0\2\1\25\0\1\12\4\0\1\12\14\0\1\12\15\0\1\12\2\0\1\12\4\0\1\12\2\0\12\12"+
    "\1\0\1\12\3\0\5\12\6\0\1\12\1\0\1\12\1\0\1\12\1\0\4\12\1\0\13\12\2\0\4\12"+
    "\5\0\5\12\4\0\1\12\7\0\17\12\6\0\15\12\7\0\10\12\11\0\7\12\1\0\7\12\6\0\3"+
    "\12\11\0\5\12\2\0\5\12\3\0\7\12\2\0\2\12\2\0\3\12\5\0\13\12\12\13\2\12\4\0"+
    "\3\12\1\0\12\12\1\0\1\12\7\0\11\12\2\0\27\12\2\0\15\12\3\0\1\12\1\0\1\12\2"+
    "\0\1\12\16\0\1\12\12\13\5\12\3\0\5\12\12\0\6\12\2\0\6\12\2\0\6\12\11\0\13"+
    "\12\1\0\2\12\2\0\7\12\4\0\5\12\3\0\5\12\5\0\12\12\1\0\5\12\1\0\1\12\1\0\2"+
    "\12\1\0\2\12\1\0\12\12\3\0\15\12\3\0\2\12\30\0\16\12\4\0\1\12\2\0\6\12\2\0"+
    "\6\12\2\0\6\12\2\0\3\12\3\0\14\12\1\0\16\12\1\0\2\12\1\0\1\12\15\0\1\12\2"+
    "\0\4\12\4\0\10\12\1\0\5\12\12\0\6\12\2\0\1\12\1\0\14\12\1\0\2\12\3\0\1\12"+
    "\2\0\4\12\1\0\2\12\12\0\10\12\6\0\6\12\1\0\2\12\5\0\10\12\1\0\3\12\1\0\13"+
    "\12\4\0\3\12\4\0\6\12\1\0\12\13\4\12\2\0\1\12\11\0\5\12\5\0\3\12\3\0\12\13"+
    "\1\12\1\0\1\12\3\0\10\12\6\0\1\12\1\0\7\12\1\0\1\12\1\0\4\12\1\0\2\12\6\0"+
    "\1\12\5\0\7\12\2\0\7\12\3\0\6\12\1\0\1\12\10\0\6\12\2\0\10\12\10\0\6\12\2"+
    "\0\1\12\3\0\1\12\13\0\10\12\5\0\15\12\3\0\2\12\6\0\5\12\3\0\6\12\10\0\10\12"+
    "\2\0\7\12\16\0\4\12\4\0\3\12\15\0\1\12\2\0\2\12\2\0\4\12\1\0\14\12\1\0\1\12"+
    "\1\0\7\12\1\0\21\12\1\0\4\12\2\0\10\12\1\0\7\12\1\0\14\12\1\0\4\12\1\0\5\12"+
    "\1\0\1\12\3\0\11\12\1\0\10\12\2\0\22\13\5\0\1\12\12\0\2\12\1\0\2\12\1\0\5"+
    "\12\6\0\2\12\1\0\1\12\2\0\1\12\1\0\12\12\1\0\4\12\1\0\1\12\1\0\1\12\6\0\1"+
    "\12\4\0\1\12\1\0\1\12\1\0\1\12\1\0\3\12\1\0\2\12\1\0\1\12\2\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\1\12\1\0\2\12\1\0\1\12\2\0\4\12\1\0\7\12\1\0\4\12\1"+
    "\0\4\12\1\0\1\12\1\0\12\12\1\0\5\12\1\0\3\12\1\0\5\12\1\0\5\12");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\1\1\5\1\1"+
    "\5\5\1\1\1\5\1\1\1\3\1\1\1\5\1\1"+
    "\5\5\1\1\1\5\1\6\1\7\1\1\1\10\1\11"+
    "\5\10\2\12\1\10\2\1\1\13\20\10\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\2\0\1\3\1\31\1\32\3\0"+
    "\13\33\3\5\1\34\1\5\3\0\3\3\1\32\3\0"+
    "\13\33\3\5\2\35\1\5\1\12\1\10\1\36\2\10"+
    "\1\37\1\10\1\12\1\0\1\10\2\0\1\40\4\10"+
    "\1\41\15\10\1\42\1\43\1\44\1\45\1\46\1\22"+
    "\1\47\1\50\1\0\1\31\2\0\10\33\1\51\4\33"+
    "\2\52\3\5\2\0\10\33\1\51\4\33\2\52\1\53"+
    "\3\5\4\10\1\54\13\10\1\0\1\31\1\52\2\33"+
    "\1\55\1\33\1\56\1\33\1\57\2\33\3\5\1\52"+
    "\2\33\1\55\1\33\1\56\1\33\1\57\2\33\3\5"+
    "\5\10\2\0\6\33\1\60\1\52\6\33\1\60\1\52"+
    "\4\10\1\0\2\33\1\61\4\33\1\61\2\33\1\62"+
    "\2\10\1\0\10\33\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\124\0\250\0\374\0\u0150\0\u01a4\0\u01f8\0\u024c"+
    "\0\u02a0\0\u02f4\0\u0348\0\u039c\0\u03f0\0\u0444\0\u0498\0\u04ec"+
    "\0\u0540\0\u0594\0\u05e8\0\u063c\0\u0690\0\u06e4\0\u0738\0\u078c"+
    "\0\u07e0\0\u0834\0\u0888\0\u08dc\0\u0930\0\u0984\0\u09d8\0\u0a2c"+
    "\0\u0a80\0\u039c\0\u024c\0\u0ad4\0\u0b28\0\u0b7c\0\u0bd0\0\u0c24"+
    "\0\u0c78\0\u0ccc\0\u0d20\0\u0d74\0\u0dc8\0\u0e1c\0\u0e70\0\u0ec4"+
    "\0\u0b28\0\u0f18\0\u0f6c\0\u0fc0\0\u1014\0\u1068\0\u10bc\0\u1110"+
    "\0\u1164\0\u11b8\0\u120c\0\u1260\0\u12b4\0\u1308\0\u135c\0\u13b0"+
    "\0\u1404\0\u1458\0\u024c\0\u024c\0\u024c\0\u14ac\0\u1500\0\u1554"+
    "\0\u15a8\0\u024c\0\u15fc\0\u024c\0\u024c\0\u024c\0\u0150\0\u1650"+
    "\0\u16a4\0\u16f8\0\u024c\0\u0444\0\u174c\0\u17a0\0\u17f4\0\u1848"+
    "\0\u189c\0\u18f0\0\u1944\0\u1998\0\u19ec\0\u1a40\0\u1a94\0\u1ae8"+
    "\0\u1b3c\0\u1b90\0\u1be4\0\u1c38\0\u063c\0\u1c8c\0\u06e4\0\u1ce0"+
    "\0\u0a2c\0\u1d34\0\u1d88\0\u1ddc\0\u0a2c\0\u0834\0\u1e30\0\u1e84"+
    "\0\u1ed8\0\u1f2c\0\u1f80\0\u1fd4\0\u2028\0\u207c\0\u20d0\0\u2124"+
    "\0\u2178\0\u21cc\0\u2220\0\u2274\0\u22c8\0\u231c\0\u024c\0\u2370"+
    "\0\u23c4\0\u0ad4\0\u2418\0\u0c24\0\u246c\0\u24c0\0\u0b28\0\u2514"+
    "\0\u2568\0\u0ad4\0\u25bc\0\u2610\0\u0ec4\0\u024c\0\u2664\0\u26b8"+
    "\0\u270c\0\u2760\0\u0b28\0\u27b4\0\u2808\0\u285c\0\u28b0\0\u2904"+
    "\0\u2958\0\u29ac\0\u2a00\0\u2a54\0\u2aa8\0\u2afc\0\u2b50\0\u2ba4"+
    "\0\u024c\0\u024c\0\u024c\0\u024c\0\u024c\0\u024c\0\u024c\0\u024c"+
    "\0\u2bf8\0\u2c4c\0\u2ca0\0\u2cf4\0\u2d48\0\u2d9c\0\u2df0\0\u2e44"+
    "\0\u2e98\0\u2eec\0\u2f40\0\u2f94\0\u17f4\0\u2fe8\0\u303c\0\u3090"+
    "\0\u30e4\0\u1b90\0\u03f0\0\u3138\0\u318c\0\u31e0\0\u3234\0\u3288"+
    "\0\u32dc\0\u3330\0\u3384\0\u33d8\0\u342c\0\u3480\0\u34d4\0\u3528"+
    "\0\u1ed8\0\u357c\0\u35d0\0\u3624\0\u3678\0\u2274\0\u07e0\0\u024c"+
    "\0\u36cc\0\u3720\0\u3774\0\u37c8\0\u381c\0\u3870\0\u38c4\0\u024c"+
    "\0\u3918\0\u396c\0\u39c0\0\u3a14\0\u3a68\0\u3abc\0\u3b10\0\u3b64"+
    "\0\u3bb8\0\u3c0c\0\u3c60\0\u3cb4\0\u3d08\0\u0444\0\u3d5c\0\u3db0"+
    "\0\u17f4\0\u3e04\0\u17f4\0\u3e58\0\u17f4\0\u3eac\0\u3f00\0\u3f54"+
    "\0\u3fa8\0\u3ffc\0\u0834\0\u4050\0\u40a4\0\u1ed8\0\u40f8\0\u1ed8"+
    "\0\u414c\0\u1ed8\0\u41a0\0\u41f4\0\u4248\0\u429c\0\u42f0\0\u4344"+
    "\0\u4398\0\u43ec\0\u4440\0\u4494\0\u024c\0\u44e8\0\u453c\0\u4590"+
    "\0\u45e4\0\u4638\0\u468c\0\u46e0\0\u3f54\0\u3138\0\u4734\0\u4788"+
    "\0\u47dc\0\u4830\0\u4884\0\u48d8\0\u4248\0\u36cc\0\u492c\0\u4980"+
    "\0\u49d4\0\u4a28\0\u4a7c\0\u4ad0\0\u4b24\0\u17f4\0\u4b78\0\u4bcc"+
    "\0\u4c20\0\u4c74\0\u1ed8\0\u4cc8\0\u4d1c\0\u0b28\0\u4d70\0\u4dc4"+
    "\0\u4e18\0\u4e6c\0\u4ec0\0\u4f14\0\u4f68\0\u4fbc\0\u5010\0\u5064"+
    "\0\u50b8\0\u0b28";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\0\2\11\2\12\1\13\1\14\1\10\2\15"+
    "\1\16\1\17\1\20\1\15\1\21\1\15\1\22\2\15"+
    "\1\23\2\15\2\16\1\15\1\16\2\15\2\10\3\15"+
    "\1\24\1\10\31\15\1\25\6\15\3\16\15\10\1\26"+
    "\1\0\2\11\1\27\1\12\1\13\1\30\1\26\2\31"+
    "\1\32\1\33\1\34\1\31\1\35\1\31\1\36\2\31"+
    "\1\37\2\31\2\32\1\31\1\32\2\31\2\26\3\31"+
    "\1\24\1\40\31\31\1\41\6\31\3\32\15\26\1\10"+
    "\1\0\2\11\2\12\1\13\1\42\1\43\1\44\1\45"+
    "\1\10\1\46\1\47\1\50\1\51\1\50\2\45\1\52"+
    "\2\45\1\53\2\54\1\45\1\55\1\45\1\56\1\57"+
    "\1\60\3\61\2\10\1\62\1\63\1\45\1\64\1\65"+
    "\1\45\1\66\1\45\1\66\1\45\1\67\1\70\1\71"+
    "\1\72\1\45\1\73\3\45\1\74\2\45\1\75\4\45"+
    "\1\76\1\77\1\100\1\101\1\45\3\54\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\1\115\1\116\1\10\1\0\2\11\2\12\1\13"+
    "\1\14\114\10\4\0\2\117\116\0\1\6\3\0\1\6"+
    "\1\0\116\6\7\0\1\120\242\0\2\11\120\0\1\121"+
    "\1\0\2\11\2\12\116\121\2\13\2\0\120\13\7\0"+
    "\1\13\1\122\124\0\10\15\1\22\2\15\1\23\10\15"+
    "\2\0\3\15\1\0\1\123\43\15\26\0\10\124\1\125"+
    "\2\124\1\126\10\124\2\0\3\124\1\0\1\123\43\124"+
    "\26\0\11\127\1\130\2\127\1\131\7\127\2\0\3\127"+
    "\1\0\1\123\1\132\1\133\1\127\1\134\1\135\5\127"+
    "\1\136\1\127\1\137\4\127\1\140\2\127\1\141\16\127"+
    "\26\0\5\15\1\142\2\15\1\22\2\15\1\23\10\15"+
    "\2\0\3\15\1\0\1\123\43\15\26\0\7\15\1\142"+
    "\1\22\2\15\1\23\10\15\2\0\3\15\1\0\1\123"+
    "\43\15\26\0\10\15\1\22\1\143\1\15\1\23\10\15"+
    "\2\0\3\15\1\0\1\123\43\15\26\0\10\15\1\22"+
    "\2\15\1\23\1\144\7\15\2\0\3\15\1\0\1\123"+
    "\43\15\26\0\24\145\2\0\3\145\2\0\43\145\26\0"+
    "\10\15\1\22\2\15\1\23\10\15\2\0\3\15\1\0"+
    "\1\123\31\15\1\146\11\15\15\0\1\147\3\0\1\147"+
    "\2\0\1\150\32\147\1\0\1\151\60\147\1\152\1\0"+
    "\2\11\1\27\1\12\1\121\1\153\32\152\1\121\1\154"+
    "\60\152\1\147\3\0\1\147\2\0\1\13\1\122\31\147"+
    "\1\0\1\151\61\147\3\0\1\147\2\0\1\150\1\147"+
    "\10\31\1\36\2\31\1\37\10\31\2\147\3\31\1\0"+
    "\1\155\43\31\16\147\3\0\1\147\2\0\1\150\1\147"+
    "\10\156\1\157\2\156\1\160\10\156\2\147\3\156\1\0"+
    "\1\155\43\156\16\147\3\0\1\147\2\0\1\150\1\147"+
    "\11\161\1\162\2\161\1\163\7\161\2\147\3\161\1\0"+
    "\1\155\1\164\1\165\1\161\1\166\1\167\5\161\1\170"+
    "\1\161\1\171\4\161\1\172\2\161\1\173\16\161\16\147"+
    "\3\0\1\147\2\0\1\150\1\147\5\31\1\174\2\31"+
    "\1\36\2\31\1\37\10\31\2\147\3\31\1\0\1\155"+
    "\43\31\16\147\3\0\1\147\2\0\1\150\1\147\7\31"+
    "\1\174\1\36\2\31\1\37\10\31\2\147\3\31\1\0"+
    "\1\155\43\31\16\147\3\0\1\147\2\0\1\150\1\147"+
    "\10\31\1\36\1\175\1\31\1\37\10\31\2\147\3\31"+
    "\1\0\1\155\43\31\16\147\3\0\1\147\2\0\1\150"+
    "\1\147\10\31\1\36\2\31\1\37\1\176\7\31\2\147"+
    "\3\31\1\0\1\155\43\31\16\147\2\177\1\200\1\147"+
    "\1\177\1\0\1\150\32\147\1\0\1\151\61\147\3\0"+
    "\1\147\2\0\1\150\1\147\10\31\1\36\2\31\1\37"+
    "\10\31\2\147\3\31\1\0\1\155\31\31\1\201\11\31"+
    "\15\147\15\0\1\202\1\0\1\202\7\0\4\202\1\0"+
    "\1\202\10\0\1\202\2\0\1\202\5\0\4\202\1\0"+
    "\1\202\12\0\1\202\5\0\3\202\26\0\1\46\2\45"+
    "\1\46\20\45\2\0\3\45\2\0\43\45\26\0\24\46"+
    "\2\0\3\46\2\0\43\46\26\0\1\46\2\45\1\46"+
    "\20\45\2\0\3\45\2\0\37\45\1\203\3\45\26\0"+
    "\1\46\2\45\1\46\12\45\2\204\1\45\1\204\2\45"+
    "\2\0\3\45\2\0\40\45\3\204\26\0\1\46\2\45"+
    "\1\46\20\45\2\0\1\45\1\205\1\45\2\0\43\45"+
    "\26\0\1\46\2\45\1\46\17\45\1\206\2\0\3\45"+
    "\2\0\32\45\1\207\10\45\26\0\1\46\2\45\1\46"+
    "\14\45\1\207\3\45\2\0\3\45\2\0\17\45\1\210"+
    "\23\45\44\0\2\54\1\0\1\54\51\0\3\54\45\0"+
    "\1\211\1\0\1\211\1\212\3\0\1\212\44\0\3\211"+
    "\26\0\1\46\2\45\1\46\1\213\17\45\2\0\3\45"+
    "\2\0\43\45\15\0\35\214\1\0\66\214\36\215\1\216"+
    "\65\215\11\0\1\46\2\45\1\46\20\45\2\0\3\45"+
    "\2\0\2\45\1\217\40\45\26\0\1\46\2\45\1\46"+
    "\16\45\1\220\1\45\2\0\3\45\2\0\43\45\26\0"+
    "\1\46\2\45\1\46\20\45\2\0\3\45\2\0\5\45"+
    "\1\221\35\45\26\0\1\46\2\45\1\46\20\45\2\0"+
    "\1\222\2\45\2\0\43\45\26\0\1\46\2\45\1\46"+
    "\20\45\2\0\3\45\2\0\42\45\1\223\26\0\1\46"+
    "\2\45\1\46\20\45\2\0\3\45\2\0\1\45\1\224"+
    "\41\45\26\0\1\46\2\45\1\46\1\45\1\225\16\45"+
    "\2\0\3\45\2\0\43\45\26\0\1\46\2\45\1\46"+
    "\20\45\2\0\3\45\2\0\4\45\1\226\36\45\26\0"+
    "\1\46\2\45\1\46\3\45\1\227\14\45\2\0\3\45"+
    "\2\0\43\45\26\0\1\46\2\45\1\46\2\45\1\230"+
    "\15\45\2\0\3\45\2\0\43\45\26\0\1\46\2\45"+
    "\1\46\20\45\2\0\3\45\2\0\22\45\1\231\20\45"+
    "\26\0\1\46\2\45\1\46\20\45\2\0\3\45\2\0"+
    "\25\45\1\232\15\45\26\0\1\46\2\45\1\46\20\45"+
    "\2\0\3\45\2\0\21\45\1\233\5\45\1\234\13\45"+
    "\26\0\1\46\2\45\1\46\20\45\2\0\3\45\2\0"+
    "\24\45\1\235\3\45\1\236\12\45\26\0\1\46\2\45"+
    "\1\46\20\45\2\0\3\45\2\0\21\45\1\233\1\45"+
    "\1\237\17\45\26\0\1\46\2\45\1\46\20\45\2\0"+
    "\3\45\2\0\24\45\1\235\1\45\1\240\14\45\132\0"+
    "\1\241\121\0\1\242\1\0\1\243\122\0\1\244\1\245"+
    "\123\0\1\246\124\0\1\247\125\0\1\250\13\0\1\251"+
    "\113\0\1\121\3\0\1\121\1\0\116\121\10\122\1\252"+
    "\113\122\11\0\10\124\1\125\1\253\1\124\1\126\10\124"+
    "\2\0\3\124\1\0\1\123\43\124\26\0\10\124\1\125"+
    "\2\124\1\126\1\254\7\124\2\0\3\124\1\0\1\123"+
    "\43\124\26\0\24\127\2\0\3\127\1\0\1\123\43\127"+
    "\26\0\24\127\2\0\3\127\1\0\1\123\1\127\1\255"+
    "\41\127\26\0\24\127\2\0\3\127\1\0\1\123\4\127"+
    "\1\256\36\127\26\0\24\127\2\0\3\127\1\0\1\123"+
    "\1\127\1\257\41\127\26\0\5\127\1\260\16\127\2\0"+
    "\3\127\1\0\1\123\6\127\1\261\34\127\26\0\24\127"+
    "\2\0\3\127\1\0\1\123\4\127\1\262\36\127\26\0"+
    "\7\127\1\263\14\127\2\0\3\127\1\0\1\123\10\127"+
    "\1\264\32\127\26\0\4\127\1\265\17\127\2\0\3\127"+
    "\1\0\1\123\1\127\1\266\41\127\26\0\6\127\1\265"+
    "\15\127\2\0\3\127\1\0\1\123\4\127\1\267\36\127"+
    "\26\0\23\127\1\270\2\0\3\127\1\0\1\123\43\127"+
    "\26\0\24\127\2\0\3\127\1\0\1\123\17\127\1\271"+
    "\23\127\26\0\24\272\2\0\3\272\1\0\1\123\43\272"+
    "\26\0\10\15\1\22\1\15\1\273\1\23\10\15\2\0"+
    "\3\15\1\0\1\123\43\15\26\0\10\15\1\22\2\15"+
    "\1\23\1\15\1\273\6\15\2\0\3\15\1\0\1\123"+
    "\43\15\26\0\10\274\1\275\2\274\1\276\10\274\2\0"+
    "\3\274\1\0\1\123\43\274\15\0\1\147\3\0\1\147"+
    "\4\0\31\147\1\0\1\151\60\147\1\152\3\0\1\152"+
    "\1\0\1\121\1\153\32\152\1\121\1\154\61\152\3\0"+
    "\1\152\1\0\3\121\31\152\1\121\1\154\61\152\2\177"+
    "\1\200\1\152\1\177\1\121\1\153\32\152\1\121\1\154"+
    "\60\152\1\147\3\0\1\147\2\0\1\150\1\147\10\156"+
    "\1\157\1\277\1\156\1\160\10\156\2\147\3\156\1\0"+
    "\1\155\43\156\16\147\3\0\1\147\2\0\1\150\1\147"+
    "\10\156\1\157\2\156\1\160\1\300\7\156\2\147\3\156"+
    "\1\0\1\155\43\156\16\147\3\0\1\147\2\0\1\150"+
    "\1\147\24\161\2\147\3\161\1\0\1\155\43\161\16\147"+
    "\3\0\1\147\2\0\1\150\1\147\24\161\2\147\3\161"+
    "\1\0\1\155\1\161\1\301\41\161\16\147\3\0\1\147"+
    "\2\0\1\150\1\147\24\161\2\147\3\161\1\0\1\155"+
    "\4\161\1\302\36\161\16\147\3\0\1\147\2\0\1\150"+
    "\1\147\24\161\2\147\3\161\1\0\1\155\1\161\1\303"+
    "\41\161\16\147\3\0\1\147\2\0\1\150\1\147\5\161"+
    "\1\304\16\161\2\147\3\161\1\0\1\155\6\161\1\305"+
    "\34\161\16\147\3\0\1\147\2\0\1\150\1\147\24\161"+
    "\2\147\3\161\1\0\1\155\4\161\1\306\36\161\16\147"+
    "\3\0\1\147\2\0\1\150\1\147\7\161\1\307\14\161"+
    "\2\147\3\161\1\0\1\155\10\161\1\310\32\161\16\147"+
    "\3\0\1\147\2\0\1\150\1\147\4\161\1\311\17\161"+
    "\2\147\3\161\1\0\1\155\1\161\1\312\41\161\16\147"+
    "\3\0\1\147\2\0\1\150\1\147\6\161\1\311\15\161"+
    "\2\147\3\161\1\0\1\155\4\161\1\313\36\161\16\147"+
    "\3\0\1\147\2\0\1\150\1\147\23\161\1\314\2\147"+
    "\3\161\1\0\1\155\43\161\16\147\3\0\1\147\2\0"+
    "\1\150\1\147\24\161\2\147\3\161\1\0\1\155\17\161"+
    "\1\315\23\161\16\147\3\0\1\147\2\0\1\150\1\147"+
    "\24\316\2\147\3\316\1\0\1\155\43\316\16\147\3\0"+
    "\1\147\2\0\1\150\1\147\10\31\1\36\1\31\1\317"+
    "\1\37\10\31\2\147\3\31\1\0\1\155\43\31\16\147"+
    "\3\0\1\147\2\0\1\150\1\147\10\31\1\36\2\31"+
    "\1\37\1\31\1\317\6\31\2\147\3\31\1\0\1\155"+
    "\43\31\15\147\2\0\1\320\121\0\1\147\3\0\1\147"+
    "\2\0\1\150\1\147\10\321\1\322\2\321\1\323\10\321"+
    "\2\147\3\321\1\0\1\155\43\321\15\147\11\0\1\46"+
    "\2\45\1\46\20\45\2\0\3\45\2\0\2\45\1\324"+
    "\40\45\26\0\1\46\2\45\1\46\20\45\2\0\3\45"+
    "\2\0\5\45\1\325\35\45\26\0\1\46\2\45\1\46"+
    "\20\45\2\0\3\45\2\0\16\45\1\326\24\45\26\0"+
    "\1\46\2\45\1\46\20\45\2\0\3\45\2\0\20\45"+
    "\1\327\22\45\45\0\1\211\1\0\1\211\51\0\3\211"+
    "\26\0\1\46\2\45\1\46\20\45\2\0\3\45\2\0"+
    "\1\223\42\45\52\0\1\330\77\0\1\46\2\45\1\46"+
    "\1\45\1\331\16\45\2\0\3\45\2\0\43\45\26\0"+
    "\1\46\2\45\1\46\6\45\1\332\11\45\2\0\3\45"+
    "\2\0\43\45\26\0\1\46\2\45\1\46\3\45\1\333"+
    "\14\45\2\0\3\45\2\0\43\45\26\0\1\46\2\45"+
    "\1\46\11\45\1\332\6\45\2\0\3\45\2\0\43\45"+
    "\26\0\1\46\2\45\1\46\20\45\2\0\3\45\2\0"+
    "\13\45\1\334\27\45\26\0\1\46\2\45\1\46\17\45"+
    "\1\335\2\0\3\45\2\0\43\45\26\0\1\46\2\45"+
    "\1\46\20\45\2\0\3\45\2\0\15\45\1\336\25\45"+
    "\26\0\1\46\2\45\1\46\20\45\2\0\3\45\2\0"+
    "\17\45\1\337\23\45\26\0\1\46\2\45\1\46\20\45"+
    "\2\0\3\45\2\0\3\45\1\223\37\45\26\0\1\46"+
    "\2\45\1\46\20\45\2\0\3\45\2\0\2\45\1\223"+
    "\40\45\26\0\1\46\2\45\1\46\20\45\2\0\3\45"+
    "\2\0\5\45\1\223\35\45\26\0\1\46\2\45\1\46"+
    "\1\45\1\340\16\45\2\0\3\45\2\0\43\45\26\0"+
    "\1\46\2\45\1\46\20\45\2\0\3\45\2\0\16\45"+
    "\1\332\2\45\1\223\21\45\26\0\1\46\2\45\1\46"+
    "\3\45\1\341\14\45\2\0\3\45\2\0\43\45\26\0"+
    "\1\46\2\45\1\46\20\45\2\0\3\45\2\0\20\45"+
    "\1\332\3\45\1\223\16\45\26\0\1\46\2\45\1\46"+
    "\20\45\2\0\3\45\2\0\16\45\1\342\24\45\26\0"+
    "\1\46\2\45\1\46\20\45\2\0\3\45\2\0\20\45"+
    "\1\343\22\45\15\0\10\251\1\344\113\251\7\122\1\345"+
    "\114\122\11\0\10\124\1\125\1\124\1\346\1\126\10\124"+
    "\2\0\3\124\1\0\1\123\43\124\26\0\10\124\1\125"+
    "\2\124\1\126\1\124\1\346\6\124\2\0\3\124\1\0"+
    "\1\123\43\124\26\0\24\127\2\0\3\127\1\0\1\123"+
    "\1\347\42\127\26\0\24\127\2\0\3\127\1\0\1\123"+
    "\3\127\1\350\37\127\26\0\24\127\2\0\3\127\1\0"+
    "\1\123\2\127\1\351\40\127\26\0\5\127\1\352\16\127"+
    "\2\0\3\127\1\0\1\123\43\127\26\0\24\127\2\0"+
    "\3\127\1\0\1\123\7\127\1\353\33\127\26\0\24\127"+
    "\2\0\3\127\1\0\1\123\5\127\1\351\35\127\26\0"+
    "\7\127\1\354\14\127\2\0\3\127\1\0\1\123\43\127"+
    "\26\0\24\127\2\0\3\127\1\0\1\123\11\127\1\353"+
    "\31\127\26\0\24\127\2\0\3\127\1\0\1\123\13\127"+
    "\1\355\27\127\26\0\24\127\2\0\3\127\1\0\1\123"+
    "\15\127\1\355\25\127\26\0\5\127\1\356\16\127\2\0"+
    "\3\127\1\0\1\123\43\127\26\0\7\127\1\357\14\127"+
    "\2\0\3\127\1\0\1\123\43\127\26\0\10\274\1\275"+
    "\2\274\1\276\10\274\2\0\3\274\1\0\1\123\31\274"+
    "\1\360\11\274\26\0\10\274\1\275\1\361\1\274\1\276"+
    "\10\274\2\0\3\274\1\0\1\123\31\274\1\360\11\274"+
    "\26\0\10\274\1\275\2\274\1\276\1\362\7\274\2\0"+
    "\3\274\1\0\1\123\31\274\1\360\11\274\15\0\1\147"+
    "\3\0\1\147\2\0\1\150\1\147\10\156\1\157\1\156"+
    "\1\363\1\160\10\156\2\147\3\156\1\0\1\155\43\156"+
    "\16\147\3\0\1\147\2\0\1\150\1\147\10\156\1\157"+
    "\2\156\1\160\1\156\1\363\6\156\2\147\3\156\1\0"+
    "\1\155\43\156\16\147\3\0\1\147\2\0\1\150\1\147"+
    "\24\161\2\147\3\161\1\0\1\155\1\364\42\161\16\147"+
    "\3\0\1\147\2\0\1\150\1\147\24\161\2\147\3\161"+
    "\1\0\1\155\3\161\1\365\37\161\16\147\3\0\1\147"+
    "\2\0\1\150\1\147\24\161\2\147\3\161\1\0\1\155"+
    "\2\161\1\366\40\161\16\147\3\0\1\147\2\0\1\150"+
    "\1\147\5\161\1\367\16\161\2\147\3\161\1\0\1\155"+
    "\43\161\16\147\3\0\1\147\2\0\1\150\1\147\24\161"+
    "\2\147\3\161\1\0\1\155\7\161\1\370\33\161\16\147"+
    "\3\0\1\147\2\0\1\150\1\147\24\161\2\147\3\161"+
    "\1\0\1\155\5\161\1\366\35\161\16\147\3\0\1\147"+
    "\2\0\1\150\1\147\7\161\1\371\14\161\2\147\3\161"+
    "\1\0\1\155\43\161\16\147\3\0\1\147\2\0\1\150"+
    "\1\147\24\161\2\147\3\161\1\0\1\155\11\161\1\370"+
    "\31\161\16\147\3\0\1\147\2\0\1\150\1\147\24\161"+
    "\2\147\3\161\1\0\1\155\13\161\1\372\27\161\16\147"+
    "\3\0\1\147\2\0\1\150\1\147\24\161\2\147\3\161"+
    "\1\0\1\155\15\161\1\372\25\161\16\147\3\0\1\147"+
    "\2\0\1\150\1\147\5\161\1\373\16\161\2\147\3\161"+
    "\1\0\1\155\43\161\16\147\3\0\1\147\2\0\1\150"+
    "\1\147\7\161\1\374\14\161\2\147\3\161\1\0\1\155"+
    "\43\161\16\147\3\0\1\147\2\0\1\150\1\147\10\321"+
    "\1\322\2\321\1\323\10\321\2\147\3\321\1\0\1\155"+
    "\31\321\1\375\11\321\16\147\3\0\1\147\2\0\1\150"+
    "\1\147\10\321\1\322\1\376\1\321\1\323\10\321\2\147"+
    "\3\321\1\0\1\155\31\321\1\375\11\321\16\147\3\0"+
    "\1\147\2\0\1\150\1\147\10\321\1\322\2\321\1\323"+
    "\1\377\7\321\2\147\3\321\1\0\1\155\31\321\1\375"+
    "\11\321\15\147\11\0\1\46\2\45\1\46\20\45\2\0"+
    "\3\45\2\0\1\45\1\u0100\41\45\26\0\1\46\2\45"+
    "\1\46\20\45\2\0\3\45\2\0\4\45\1\u0100\36\45"+
    "\26\0\1\46\2\45\1\46\20\45\2\0\3\45\2\0"+
    "\1\45\1\223\41\45\26\0\1\46\2\45\1\46\20\45"+
    "\2\0\3\45\2\0\4\45\1\223\36\45\26\0\1\46"+
    "\2\45\1\46\20\45\2\0\3\45\2\0\33\45\1\u0101"+
    "\7\45\26\0\1\46\2\45\1\46\20\45\2\0\3\45"+
    "\2\0\41\45\1\223\1\45\26\0\1\46\2\45\1\46"+
    "\20\45\2\0\3\45\2\0\34\45\1\u0102\6\45\26\0"+
    "\1\46\2\45\1\46\20\45\2\0\3\45\2\0\23\45"+
    "\1\u0103\17\45\26\0\1\46\2\45\1\46\20\45\2\0"+
    "\3\45\2\0\32\45\1\223\10\45\26\0\1\46\2\45"+
    "\1\46\20\45\2\0\3\45\2\0\26\45\1\u0104\14\45"+
    "\26\0\1\46\2\45\1\46\14\45\1\223\3\45\2\0"+
    "\3\45\2\0\43\45\26\0\1\46\2\45\1\46\20\45"+
    "\2\0\3\45\2\0\12\45\1\223\30\45\26\0\1\46"+
    "\2\45\1\46\20\45\2\0\3\45\2\0\14\45\1\223"+
    "\26\45\26\0\1\46\2\45\1\46\20\45\2\0\3\45"+
    "\2\0\35\45\1\223\5\45\26\0\1\46\2\45\1\46"+
    "\20\45\2\0\3\45\2\0\36\45\1\223\4\45\15\0"+
    "\7\251\1\u0105\1\u0106\113\251\1\345\3\0\1\345\1\0"+
    "\116\345\11\0\24\127\2\0\3\127\1\0\1\123\1\u0107"+
    "\42\127\26\0\24\127\2\0\3\127\1\0\1\123\3\127"+
    "\1\u0108\37\127\26\0\24\127\2\0\3\127\1\0\1\123"+
    "\27\127\1\u0109\13\127\26\0\24\127\2\0\3\127\1\0"+
    "\1\123\30\127\1\u010a\12\127\26\0\24\127\2\0\3\127"+
    "\1\0\1\123\22\127\1\u010b\20\127\26\0\24\127\2\0"+
    "\3\127\1\0\1\123\25\127\1\u010c\15\127\26\0\10\274"+
    "\1\275\2\274\1\276\10\274\2\0\3\274\1\0\1\123"+
    "\31\274\1\u010d\11\274\26\0\10\274\1\275\1\274\1\u010e"+
    "\1\276\10\274\2\0\3\274\1\0\1\123\31\274\1\360"+
    "\11\274\26\0\10\274\1\275\2\274\1\276\1\274\1\u010e"+
    "\6\274\2\0\3\274\1\0\1\123\31\274\1\360\11\274"+
    "\15\0\1\147\3\0\1\147\2\0\1\150\1\147\24\161"+
    "\2\147\3\161\1\0\1\155\1\u010f\42\161\16\147\3\0"+
    "\1\147\2\0\1\150\1\147\24\161\2\147\3\161\1\0"+
    "\1\155\3\161\1\u0110\37\161\16\147\3\0\1\147\2\0"+
    "\1\150\1\147\24\161\2\147\3\161\1\0\1\155\27\161"+
    "\1\u0111\13\161\16\147\3\0\1\147\2\0\1\150\1\147"+
    "\24\161\2\147\3\161\1\0\1\155\30\161\1\u0112\12\161"+
    "\16\147\3\0\1\147\2\0\1\150\1\147\24\161\2\147"+
    "\3\161\1\0\1\155\22\161\1\u0113\20\161\16\147\3\0"+
    "\1\147\2\0\1\150\1\147\24\161\2\147\3\161\1\0"+
    "\1\155\25\161\1\u0114\15\161\16\147\3\0\1\147\2\0"+
    "\1\150\1\147\10\321\1\322\2\321\1\323\10\321\2\147"+
    "\3\321\1\0\1\155\31\321\1\u0115\11\321\16\147\3\0"+
    "\1\147\2\0\1\150\1\147\10\321\1\322\1\321\1\u0116"+
    "\1\323\10\321\2\147\3\321\1\0\1\155\31\321\1\375"+
    "\11\321\16\147\3\0\1\147\2\0\1\150\1\147\10\321"+
    "\1\322\2\321\1\323\1\321\1\u0116\6\321\2\147\3\321"+
    "\1\0\1\155\31\321\1\375\11\321\15\147\11\0\1\46"+
    "\2\45\1\46\20\45\2\0\3\45\2\0\40\45\1\223"+
    "\2\45\26\0\1\46\2\45\1\46\20\45\2\0\3\45"+
    "\2\0\1\45\1\u0117\41\45\26\0\1\46\2\45\1\46"+
    "\20\45\2\0\3\45\2\0\4\45\1\u0118\36\45\26\0"+
    "\1\46\2\45\1\46\20\45\2\0\3\45\2\0\22\45"+
    "\1\u0119\20\45\26\0\1\46\2\45\1\46\20\45\2\0"+
    "\3\45\2\0\25\45\1\u011a\15\45\15\0\7\251\1\u011b"+
    "\1\344\113\251\11\0\23\127\1\u011c\2\0\3\127\1\0"+
    "\1\123\43\127\26\0\24\127\2\0\3\127\1\0\1\123"+
    "\17\127\1\u011d\23\127\26\0\5\127\1\u011e\16\127\2\0"+
    "\3\127\1\0\1\123\43\127\26\0\7\127\1\u011e\14\127"+
    "\2\0\3\127\1\0\1\123\43\127\26\0\24\127\2\0"+
    "\3\127\1\0\1\123\23\127\1\u011f\17\127\26\0\24\127"+
    "\2\0\3\127\1\0\1\123\26\127\1\u0120\14\127\15\0"+
    "\1\147\3\0\1\147\2\0\1\150\1\147\23\161\1\u0121"+
    "\2\147\3\161\1\0\1\155\43\161\16\147\3\0\1\147"+
    "\2\0\1\150\1\147\24\161\2\147\3\161\1\0\1\155"+
    "\17\161\1\u0122\23\161\16\147\3\0\1\147\2\0\1\150"+
    "\1\147\5\161\1\u0123\16\161\2\147\3\161\1\0\1\155"+
    "\43\161\16\147\3\0\1\147\2\0\1\150\1\147\7\161"+
    "\1\u0123\14\161\2\147\3\161\1\0\1\155\43\161\16\147"+
    "\3\0\1\147\2\0\1\150\1\147\24\161\2\147\3\161"+
    "\1\0\1\155\23\161\1\u0124\17\161\16\147\3\0\1\147"+
    "\2\0\1\150\1\147\24\161\2\147\3\161\1\0\1\155"+
    "\26\161\1\u0125\14\161\15\147\11\0\1\46\2\45\1\46"+
    "\20\45\2\0\3\45\2\0\22\45\1\u0126\20\45\26\0"+
    "\1\46\2\45\1\46\20\45\2\0\3\45\2\0\25\45"+
    "\1\u0126\15\45\26\0\1\46\2\45\1\46\20\45\2\0"+
    "\3\45\2\0\1\45\1\u0127\41\45\26\0\1\46\2\45"+
    "\1\46\20\45\2\0\3\45\2\0\4\45\1\u0128\36\45"+
    "\15\0\10\u011b\1\u0129\113\u011b\11\0\24\127\2\0\3\127"+
    "\1\0\1\123\16\127\1\u012a\24\127\26\0\24\127\2\0"+
    "\3\127\1\0\1\123\20\127\1\u012b\22\127\26\0\24\127"+
    "\2\0\3\127\1\0\1\123\22\127\1\u012c\20\127\26\0"+
    "\24\127\2\0\3\127\1\0\1\123\25\127\1\u012d\15\127"+
    "\15\0\1\147\3\0\1\147\2\0\1\150\1\147\24\161"+
    "\2\147\3\161\1\0\1\155\16\161\1\u012e\24\161\16\147"+
    "\3\0\1\147\2\0\1\150\1\147\24\161\2\147\3\161"+
    "\1\0\1\155\20\161\1\u012f\22\161\16\147\3\0\1\147"+
    "\2\0\1\150\1\147\24\161\2\147\3\161\1\0\1\155"+
    "\22\161\1\u0130\20\161\16\147\3\0\1\147\2\0\1\150"+
    "\1\147\24\161\2\147\3\161\1\0\1\155\25\161\1\u0131"+
    "\15\161\15\147\11\0\1\46\2\45\1\46\20\45\2\0"+
    "\3\45\2\0\12\45\1\u0132\30\45\26\0\1\46\2\45"+
    "\1\46\20\45\2\0\3\45\2\0\14\45\1\u0132\26\45"+
    "\15\0\7\u011b\1\0\114\u011b\11\0\24\127\2\0\3\127"+
    "\1\0\1\123\1\127\1\u011e\41\127\26\0\24\127\2\0"+
    "\3\127\1\0\1\123\4\127\1\u011e\36\127\26\0\24\127"+
    "\2\0\3\127\1\0\1\123\16\127\1\u011e\24\127\26\0"+
    "\24\127\2\0\3\127\1\0\1\123\20\127\1\u011e\22\127"+
    "\15\0\1\147\3\0\1\147\2\0\1\150\1\147\24\161"+
    "\2\147\3\161\1\0\1\155\1\161\1\u0123\41\161\16\147"+
    "\3\0\1\147\2\0\1\150\1\147\24\161\2\147\3\161"+
    "\1\0\1\155\4\161\1\u0123\36\161\16\147\3\0\1\147"+
    "\2\0\1\150\1\147\24\161\2\147\3\161\1\0\1\155"+
    "\16\161\1\u0123\24\161\16\147\3\0\1\147\2\0\1\150"+
    "\1\147\24\161\2\147\3\161\1\0\1\155\20\161\1\u0123"+
    "\22\161\15\147";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20748];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\1\1\0\1\11\32\1\1\11\37\1\3\11"+
    "\4\1\1\11\1\1\3\11\1\1\1\0\2\1\1\11"+
    "\3\0\20\1\3\0\4\1\3\0\16\1\1\11\12\1"+
    "\1\0\1\1\2\0\1\11\22\1\10\11\2\1\2\0"+
    "\22\1\2\0\17\1\1\11\7\1\1\11\13\1\1\0"+
    "\40\1\1\11\43\1\1\0\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AvrAsmLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 52: break;
          case 2: 
            { yybegin(YYINITIAL);      return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 53: break;
          case 3: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 4;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 5;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 54: break;
          case 4: 
            { yybegin(YYINITIAL);      return AvrAsmTypes.LINE_COMMENT;
            } 
            // fall through
          case 55: break;
          case 5: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.MNEMONIC;
            } 
            // fall through
          case 56: break;
          case 6: 
            { return AvrAsmTypes.DIVISION;
            } 
            // fall through
          case 57: break;
          case 7: 
            { return AvrAsmTypes.STAR;
            } 
            // fall through
          case 58: break;
          case 8: 
            { return AvrAsmTypes.IDENTIFIER;
            } 
            // fall through
          case 59: break;
          case 9: 
            { return AvrAsmTypes.SYMBOL_IDENTIFIER;
            } 
            // fall through
          case 60: break;
          case 10: 
            { return AvrAsmTypes.INTEGER;
            } 
            // fall through
          case 61: break;
          case 11: 
            { return AvrAsmTypes.INDIRECT;
            } 
            // fall through
          case 62: break;
          case 12: 
            { return AvrAsmTypes.NOT;
            } 
            // fall through
          case 63: break;
          case 13: 
            { return AvrAsmTypes.TILDA;
            } 
            // fall through
          case 64: break;
          case 14: 
            { return AvrAsmTypes.PLUS;
            } 
            // fall through
          case 65: break;
          case 15: 
            { return AvrAsmTypes.MINUS;
            } 
            // fall through
          case 66: break;
          case 16: 
            { return AvrAsmTypes.LESS;
            } 
            // fall through
          case 67: break;
          case 17: 
            { return AvrAsmTypes.GREATER;
            } 
            // fall through
          case 68: break;
          case 18: 
            { return AvrAsmTypes.EQUAL;
            } 
            // fall through
          case 69: break;
          case 19: 
            { return AvrAsmTypes.AND_BIN;
            } 
            // fall through
          case 70: break;
          case 20: 
            { return AvrAsmTypes.XOR_BIN;
            } 
            // fall through
          case 71: break;
          case 21: 
            { return AvrAsmTypes.OR_BIN;
            } 
            // fall through
          case 72: break;
          case 22: 
            { return AvrAsmTypes.COMMA;
            } 
            // fall through
          case 73: break;
          case 23: 
            { return AvrAsmTypes.L_PAREN;
            } 
            // fall through
          case 74: break;
          case 24: 
            { return AvrAsmTypes.R_PAREN;
            } 
            // fall through
          case 75: break;
          case 25: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 6;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 5;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return AvrAsmTypes.BLOCK_COMMENT;
            } 
            // fall through
          case 76: break;
          case 26: 
            { return AvrAsmTypes.LABEL;
            } 
            // fall through
          case 77: break;
          case 27: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.GENERIC_DIRECTIVE;
            } 
            // fall through
          case 78: break;
          case 28: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.PREPROCESSOR_NAME;
            } 
            // fall through
          case 79: break;
          case 29: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return AvrAsmTypes.LABEL;
            } 
            // fall through
          case 80: break;
          case 30: 
            { return AvrAsmTypes.REGISTER;
            } 
            // fall through
          case 81: break;
          case 31: 
            { return AvrAsmTypes.PC;
            } 
            // fall through
          case 82: break;
          case 32: 
            { return AvrAsmTypes.STRING;
            } 
            // fall through
          case 83: break;
          case 33: 
            { return AvrAsmTypes.FUNC;
            } 
            // fall through
          case 84: break;
          case 34: 
            { return AvrAsmTypes.NOT_EQUAL;
            } 
            // fall through
          case 85: break;
          case 35: 
            { return AvrAsmTypes.SHIFT_LEFT;
            } 
            // fall through
          case 86: break;
          case 36: 
            { return AvrAsmTypes.LESS_EQUAL;
            } 
            // fall through
          case 87: break;
          case 37: 
            { return AvrAsmTypes.SHIFT_RIGHT;
            } 
            // fall through
          case 88: break;
          case 38: 
            { return AvrAsmTypes.GREATER_EQUAL;
            } 
            // fall through
          case 89: break;
          case 39: 
            { return AvrAsmTypes.AND;
            } 
            // fall through
          case 90: break;
          case 40: 
            { return AvrAsmTypes.OR;
            } 
            // fall through
          case 91: break;
          case 41: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.DB_DIRECTIVE;
            } 
            // fall through
          case 92: break;
          case 42: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.BR_MNEMONIC;
            } 
            // fall through
          case 93: break;
          case 43: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return AvrAsmTypes.LABEL;
            } 
            // fall through
          case 94: break;
          case 44: 
            { return AvrAsmTypes.CHAR;
            } 
            // fall through
          case 95: break;
          case 45: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.SET_DIRECTIVE;
            } 
            // fall through
          case 96: break;
          case 46: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.EQU_DIRECTIVE;
            } 
            // fall through
          case 97: break;
          case 47: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.DEF_DIRECTIVE;
            } 
            // fall through
          case 98: break;
          case 48: 
            { return AvrAsmTypes.MACROS_NAME;
            } 
            // fall through
          case 99: break;
          case 49: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.REPORT_DIRECTIVE;
            } 
            // fall through
          case 100: break;
          case 50: 
            { return AvrAsmTypes.STRLEN_FUNC;
            } 
            // fall through
          case 101: break;
          case 51: 
            { return AvrAsmTypes.DEFINED_FUNC;
            } 
            // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
