/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.jetbrains.tinygoplugin.lang.avrAsm;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import org.jetbrains.tinygoplugin.lang.avrAsm.psi.AvrAsmTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>AvrAsm.flex</tt>
 */
class AvrAsmLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_OPERANDS = 2;
  public static final int IN_PREPROCESSOR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15680 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13"+
    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31"+
    "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\1\40\2\13\1\41\2\13"+
    "\1\42\1\1\1\13\1\43\4\1\1\13\1\44\1\1\1\45\1\22\7\13\1\46\1\24\1\34\1\47\1"+
    "\35\1\50\1\51\1\52\1\46\1\16\1\53\1\47\1\35\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\22\1\35\1\62\1\63\1\64\1\46\1\65\1\66\1\47\1\35\1\62\1\67\1\70\1\46\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\57\1\1\1\100\1\101\1\35\1\102\1\103\1\104"+
    "\1\46\1\1\1\100\1\101\1\35\1\105\1\103\1\106\1\46\1\107\1\110\1\101\1\13\1"+
    "\37\1\111\1\112\1\46\1\113\1\114\1\115\1\13\1\116\1\117\1\120\1\57\1\121\1"+
    "\24\2\13\1\31\1\122\1\123\2\1\1\124\1\125\1\126\1\127\1\130\1\131\2\1\1\64"+
    "\1\132\1\123\1\133\1\134\1\13\1\135\1\24\1\136\1\134\1\13\1\135\1\137\3\1"+
    "\4\13\1\123\4\13\1\140\2\13\1\141\2\13\1\142\24\13\1\143\1\144\2\13\1\143"+
    "\2\13\1\145\1\146\1\14\3\13\1\146\3\13\1\37\2\1\1\13\1\1\5\13\1\147\1\24\45"+
    "\13\1\150\1\13\1\24\1\31\4\13\1\151\1\152\1\153\1\154\1\13\1\154\1\13\1\155"+
    "\1\153\1\156\5\13\1\157\1\123\1\1\1\160\1\123\5\13\1\26\2\13\1\31\4\13\1\60"+
    "\1\13\1\122\2\43\1\57\1\13\1\42\1\154\2\13\1\43\1\13\1\161\1\123\2\1\1\13"+
    "\1\43\3\13\1\122\1\13\1\150\2\123\1\162\1\122\4\1\4\13\1\43\1\123\1\163\1"+
    "\155\3\13\1\40\3\13\1\155\3\13\1\26\1\164\1\40\1\13\1\42\1\152\4\1\1\165\1"+
    "\13\1\166\17\13\1\167\21\13\1\147\2\13\1\147\1\170\1\13\1\42\3\13\1\171\1"+
    "\172\1\173\1\135\1\172\2\1\1\174\1\175\1\64\1\176\1\1\1\177\1\1\1\135\3\1"+
    "\2\13\1\64\1\200\1\201\1\202\1\203\1\204\1\1\2\13\1\152\62\1\1\205\2\13\1"+
    "\161\161\1\2\13\1\122\2\13\1\122\10\13\1\206\1\155\2\13\1\141\3\13\1\207\1"+
    "\175\1\13\1\210\4\211\2\13\2\1\1\175\35\1\1\212\1\1\1\24\1\213\1\24\4\13\1"+
    "\214\1\24\4\13\1\142\1\215\1\13\1\42\1\24\4\13\1\122\1\1\1\13\1\31\3\1\1\13"+
    "\40\1\133\13\1\60\4\1\135\13\1\60\2\1\10\13\1\135\4\1\2\13\1\42\20\13\1\135"+
    "\1\13\1\216\1\1\3\13\1\217\7\13\1\16\1\1\1\220\1\221\5\13\1\222\1\13\1\122"+
    "\1\26\3\1\1\220\2\13\1\26\1\1\3\13\1\155\4\13\1\60\1\123\1\13\1\223\1\40\1"+
    "\13\1\42\2\13\1\155\1\13\1\135\4\13\1\224\1\123\1\13\1\225\3\13\1\210\1\42"+
    "\1\123\1\13\1\115\4\13\1\32\1\160\1\13\1\226\1\227\1\230\1\211\2\13\1\142"+
    "\1\60\7\13\1\231\1\123\72\13\1\155\1\13\1\232\2\13\1\43\20\1\26\13\1\42\6"+
    "\13\1\161\2\1\1\210\1\233\1\35\1\234\1\235\6\13\1\16\1\1\1\236\25\13\1\42"+
    "\1\1\4\13\1\221\2\13\1\26\2\1\1\43\1\13\1\1\1\13\1\237\1\240\2\1\1\136\7\13"+
    "\1\135\1\1\1\123\1\24\1\241\1\24\1\31\1\205\4\13\1\122\1\242\1\243\2\1\1\244"+
    "\1\13\1\14\1\245\2\42\2\1\7\13\1\31\4\1\3\13\1\154\7\1\1\246\10\1\1\13\1\135"+
    "\3\13\2\64\1\1\2\13\1\1\1\13\1\31\2\13\1\31\1\13\1\42\2\13\1\247\1\250\2\1"+
    "\11\13\1\42\1\123\2\13\1\247\1\13\1\43\2\13\1\26\3\13\1\155\11\1\23\13\1\210"+
    "\1\13\1\60\1\26\11\1\1\251\2\13\1\252\1\13\1\60\1\13\1\210\1\13\1\122\4\1"+
    "\1\13\1\253\1\13\1\60\1\13\1\161\4\1\3\13\1\254\4\1\1\255\1\256\1\13\1\257"+
    "\2\1\1\13\1\135\1\13\1\135\2\1\1\134\1\13\1\210\1\1\3\13\1\60\1\13\1\60\1"+
    "\13\1\32\1\13\1\16\6\1\4\13\1\152\3\1\3\13\1\32\3\13\1\32\60\1\4\13\1\210"+
    "\1\1\1\57\1\175\3\13\1\31\1\1\1\13\1\152\1\123\3\13\1\260\1\1\2\13\1\261\4"+
    "\13\1\262\1\263\2\1\1\13\1\22\1\13\1\264\4\1\1\265\1\27\1\152\3\13\1\31\1"+
    "\123\1\34\1\47\1\35\1\62\1\67\1\266\1\267\1\154\10\1\4\13\1\31\1\123\2\1\4"+
    "\13\1\270\1\123\12\1\3\13\1\271\1\64\1\272\2\1\4\13\1\273\1\123\2\1\3\13\1"+
    "\26\1\123\3\1\1\13\1\102\1\43\1\123\26\1\4\13\1\123\1\175\34\1\3\13\1\152"+
    "\20\1\1\35\2\13\1\14\1\64\1\123\1\1\1\221\1\13\1\221\1\134\1\210\64\1\71\13"+
    "\1\161\6\1\6\13\1\122\1\1\14\13\1\155\53\1\2\13\1\122\75\1\44\13\1\210\33"+
    "\1\43\13\1\152\1\13\1\122\1\123\6\1\1\13\1\42\1\154\3\13\1\210\1\155\1\123"+
    "\1\236\1\274\1\13\67\1\4\13\1\154\2\13\1\122\1\175\1\13\4\1\1\64\1\1\76\13"+
    "\1\135\1\1\57\13\1\32\20\1\1\16\77\1\6\13\1\31\1\135\1\152\1\275\114\1\1\276"+
    "\1\277\1\300\1\1\1\301\11\1\1\302\33\1\5\13\1\136\3\13\1\153\1\303\1\304\1"+
    "\305\3\13\1\306\1\307\1\13\1\310\1\311\1\101\24\13\1\271\1\13\1\101\1\142"+
    "\1\13\1\142\1\13\1\136\1\13\1\136\1\122\1\13\1\122\1\13\1\35\1\13\1\35\1\13"+
    "\1\312\3\313\40\1\3\13\1\232\2\13\1\135\1\314\1\176\1\163\1\24\25\1\1\14\1"+
    "\222\1\315\75\1\14\13\1\154\1\210\2\1\4\13\1\31\1\123\112\1\1\305\1\13\1\316"+
    "\1\317\1\320\1\321\1\322\1\323\1\324\1\43\1\325\1\43\47\1\1\13\1\161\1\13"+
    "\1\161\1\13\1\161\47\1\55\13\1\210\2\1\103\13\1\154\15\13\1\42\150\13\1\16"+
    "\25\1\41\13\1\42\56\1\17\13\41\1");

  /* The ZZ_CMAP_A table has 3424 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\1\1\1\5\1\3\22\0\1\4\1\111\1\36\1\44\1\11\1\0\1\120\1\35\1\124"+
    "\1\125\1\10\1\113\1\123\1\114\1\14\1\7\1\32\1\30\1\107\2\106\2\30\1\110\2"+
    "\27\1\45\1\6\1\115\1\117\1\116\2\0\1\65\1\17\1\31\1\62\1\52\1\63\1\66\1\104"+
    "\1\74\1\24\1\12\1\102\1\25\1\73\1\76\1\26\1\56\1\20\1\51\1\53\1\57\1\12\1"+
    "\72\1\41\1\42\1\43\3\0\1\121\1\77\1\0\1\34\1\15\1\100\1\60\1\47\1\61\1\64"+
    "\1\103\1\71\1\21\1\12\1\101\1\22\1\70\1\75\1\23\1\54\1\16\1\46\1\50\1\55\1"+
    "\12\1\67\1\33\1\105\1\12\1\37\1\122\1\40\1\112\6\0\1\1\24\0\1\12\12\0\1\12"+
    "\4\0\1\12\5\0\27\12\1\0\12\12\4\0\14\12\16\0\5\12\7\0\1\12\1\0\1\12\1\0\5"+
    "\12\1\0\2\12\2\0\4\12\1\0\1\12\6\0\1\12\1\0\3\12\1\0\1\12\1\0\4\12\1\0\23"+
    "\12\1\0\11\12\1\0\26\12\2\0\1\12\6\0\10\12\10\0\16\12\1\0\1\12\1\0\2\12\1"+
    "\0\2\12\1\0\1\12\10\0\13\12\5\0\3\12\15\0\12\13\4\0\6\12\1\0\10\12\2\0\12"+
    "\12\1\0\6\12\12\13\3\12\2\0\14\12\2\0\3\12\12\13\14\12\4\0\1\12\5\0\16\12"+
    "\2\0\14\12\4\0\5\12\1\0\10\12\6\0\20\12\2\0\12\13\1\12\2\0\16\12\1\0\1\12"+
    "\3\0\4\12\2\0\11\12\2\0\2\12\2\0\4\12\10\0\1\12\4\0\2\12\1\0\1\12\1\0\3\12"+
    "\1\0\6\12\4\0\2\12\1\0\2\12\1\0\2\12\1\0\2\12\2\0\1\12\1\0\5\12\4\0\2\12\2"+
    "\0\3\12\3\0\1\12\7\0\4\12\1\0\1\12\7\0\12\13\6\12\13\0\3\12\1\0\11\12\1\0"+
    "\2\12\1\0\2\12\1\0\5\12\2\0\12\12\1\0\3\12\1\0\3\12\2\0\1\12\30\0\1\12\7\0"+
    "\3\12\1\0\10\12\2\0\6\12\2\0\2\12\2\0\3\12\10\0\2\12\4\0\2\12\1\0\1\12\1\0"+
    "\1\12\20\0\2\12\1\0\6\12\3\0\3\12\1\0\4\12\3\0\2\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\3\0\3\12\3\0\14\12\4\0\5\12\3\0\3\12\1\0\4\12\2\0\1\12\6\0\1\12\10\0"+
    "\4\12\1\0\10\12\1\0\3\12\1\0\30\12\3\0\10\12\1\0\3\12\1\0\4\12\7\0\2\12\1"+
    "\0\3\12\5\0\4\12\1\0\5\12\2\0\4\12\5\0\2\12\7\0\1\12\2\0\2\12\16\0\3\12\1"+
    "\0\10\12\1\0\7\12\1\0\3\12\1\0\5\12\5\0\4\12\7\0\1\12\12\0\6\12\2\0\2\12\1"+
    "\0\22\12\3\0\10\12\1\0\11\12\1\0\1\12\2\0\7\12\3\0\1\12\4\0\6\12\1\0\1\12"+
    "\1\0\10\12\2\0\2\12\14\0\17\12\1\0\12\13\7\0\2\12\1\0\1\12\2\0\2\12\1\0\1"+
    "\12\2\0\1\12\6\0\4\12\1\0\7\12\1\0\3\12\1\0\1\12\1\0\1\12\2\0\2\12\1\0\15"+
    "\12\1\0\3\12\2\0\5\12\1\0\1\12\1\0\6\12\2\0\12\13\2\0\4\12\10\0\2\12\13\0"+
    "\1\12\1\0\1\12\1\0\1\12\4\0\12\12\1\0\24\12\3\0\5\12\1\0\12\12\6\0\1\12\11"+
    "\0\12\13\4\12\2\0\6\12\1\0\1\12\5\0\1\12\2\0\13\12\1\0\15\12\1\0\4\12\2\0"+
    "\7\12\1\0\1\12\1\0\4\12\2\0\1\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0\16"+
    "\12\2\0\6\12\2\0\15\12\2\0\14\12\3\0\13\12\7\0\15\12\1\0\7\12\13\0\4\12\14"+
    "\0\1\12\1\0\2\12\14\0\4\12\3\0\1\12\4\0\2\12\15\0\3\12\2\0\12\12\15\0\1\12"+
    "\23\0\5\12\12\13\3\0\6\12\1\0\23\12\1\0\2\12\6\0\6\12\5\0\15\12\1\0\1\12\1"+
    "\0\1\12\1\0\1\12\1\0\6\12\1\0\7\12\1\0\1\12\3\0\3\12\1\0\7\12\3\0\4\12\2\0"+
    "\6\12\14\0\2\1\25\0\1\12\4\0\1\12\14\0\1\12\15\0\1\12\2\0\1\12\4\0\1\12\2"+
    "\0\12\12\1\0\1\12\3\0\5\12\6\0\1\12\1\0\1\12\1\0\1\12\1\0\4\12\1\0\13\12\2"+
    "\0\4\12\5\0\5\12\4\0\1\12\7\0\17\12\6\0\15\12\7\0\10\12\11\0\7\12\1\0\7\12"+
    "\6\0\3\12\11\0\5\12\2\0\5\12\3\0\7\12\2\0\2\12\2\0\3\12\5\0\13\12\12\13\2"+
    "\12\4\0\3\12\1\0\12\12\1\0\1\12\7\0\11\12\2\0\27\12\2\0\15\12\3\0\1\12\1\0"+
    "\1\12\2\0\1\12\16\0\1\12\12\13\5\12\3\0\5\12\12\0\6\12\2\0\6\12\2\0\6\12\11"+
    "\0\13\12\1\0\2\12\2\0\7\12\4\0\5\12\3\0\5\12\5\0\12\12\1\0\5\12\1\0\1\12\1"+
    "\0\2\12\1\0\2\12\1\0\12\12\3\0\15\12\3\0\2\12\30\0\16\12\4\0\1\12\2\0\6\12"+
    "\2\0\6\12\2\0\6\12\2\0\3\12\3\0\14\12\1\0\16\12\1\0\2\12\1\0\1\12\15\0\1\12"+
    "\2\0\4\12\4\0\10\12\1\0\5\12\12\0\6\12\2\0\1\12\1\0\14\12\1\0\2\12\3\0\1\12"+
    "\2\0\4\12\1\0\2\12\12\0\10\12\6\0\6\12\1\0\2\12\5\0\10\12\1\0\3\12\1\0\13"+
    "\12\4\0\3\12\4\0\6\12\1\0\12\13\4\12\2\0\1\12\11\0\5\12\5\0\3\12\3\0\12\13"+
    "\1\12\1\0\1\12\3\0\10\12\6\0\1\12\1\0\7\12\1\0\1\12\1\0\4\12\1\0\2\12\6\0"+
    "\1\12\5\0\7\12\2\0\7\12\3\0\6\12\1\0\1\12\10\0\6\12\2\0\10\12\10\0\6\12\2"+
    "\0\1\12\3\0\1\12\13\0\10\12\5\0\15\12\3\0\2\12\6\0\5\12\3\0\6\12\10\0\10\12"+
    "\2\0\7\12\16\0\4\12\4\0\3\12\15\0\1\12\2\0\2\12\2\0\4\12\1\0\14\12\1\0\1\12"+
    "\1\0\7\12\1\0\21\12\1\0\4\12\2\0\10\12\1\0\7\12\1\0\14\12\1\0\4\12\1\0\5\12"+
    "\1\0\1\12\3\0\11\12\1\0\10\12\2\0\22\13\5\0\1\12\12\0\2\12\1\0\2\12\1\0\5"+
    "\12\6\0\2\12\1\0\1\12\2\0\1\12\1\0\12\12\1\0\4\12\1\0\1\12\1\0\1\12\6\0\1"+
    "\12\4\0\1\12\1\0\1\12\1\0\1\12\1\0\3\12\1\0\2\12\1\0\1\12\2\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\1\12\1\0\2\12\1\0\1\12\2\0\4\12\1\0\7\12\1\0\4\12\1"+
    "\0\4\12\1\0\1\12\1\0\12\12\1\0\5\12\1\0\3\12\1\0\5\12\1\0\5\12");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\1\1\5\1\1"+
    "\5\5\1\1\1\5\1\1\1\3\1\1\1\5\1\1"+
    "\5\5\1\1\1\5\1\6\1\7\1\1\1\10\1\11"+
    "\5\10\2\12\1\10\3\1\1\13\20\10\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\2\0\1\3\1\31\1\32\3\0"+
    "\13\33\3\5\1\34\1\5\3\0\3\3\1\32\3\0"+
    "\13\33\3\5\2\35\1\5\1\12\1\10\1\36\2\10"+
    "\1\37\1\10\1\12\1\0\1\10\2\0\1\40\1\0"+
    "\1\41\4\10\1\42\15\10\1\43\1\44\1\45\1\46"+
    "\1\47\1\22\1\50\1\51\1\0\1\31\2\0\14\33"+
    "\2\52\3\5\2\0\14\33\2\52\1\53\3\5\4\10"+
    "\1\54\13\10\1\0\1\31\1\52\2\33\1\55\1\33"+
    "\1\56\1\33\1\57\2\33\3\5\1\52\2\33\1\55"+
    "\1\33\1\56\1\33\1\57\2\33\3\5\5\10\2\0"+
    "\6\33\1\60\1\52\6\33\1\60\1\52\4\10\1\0"+
    "\2\33\1\61\4\33\1\61\2\33\1\62\2\10\1\0"+
    "\10\33\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\126\0\254\0\u0102\0\u0158\0\u01ae\0\u0204\0\u025a"+
    "\0\u02b0\0\u0306\0\u035c\0\u03b2\0\u0408\0\u045e\0\u04b4\0\u050a"+
    "\0\u0560\0\u05b6\0\u060c\0\u0662\0\u06b8\0\u070e\0\u0764\0\u07ba"+
    "\0\u0810\0\u0866\0\u08bc\0\u0912\0\u0968\0\u09be\0\u0a14\0\u0a6a"+
    "\0\u0ac0\0\u03b2\0\u025a\0\u0b16\0\u0b6c\0\u0bc2\0\u0c18\0\u0c6e"+
    "\0\u0cc4\0\u0d1a\0\u0d70\0\u0dc6\0\u0e1c\0\u0e72\0\u0ec8\0\u0f1e"+
    "\0\u0f74\0\u0b6c\0\u0fca\0\u1020\0\u1076\0\u10cc\0\u1122\0\u1178"+
    "\0\u11ce\0\u1224\0\u127a\0\u12d0\0\u1326\0\u137c\0\u13d2\0\u1428"+
    "\0\u147e\0\u14d4\0\u152a\0\u025a\0\u025a\0\u025a\0\u1580\0\u15d6"+
    "\0\u162c\0\u1682\0\u025a\0\u16d8\0\u025a\0\u025a\0\u025a\0\u0158"+
    "\0\u172e\0\u1784\0\u17da\0\u025a\0\u045e\0\u1830\0\u1886\0\u18dc"+
    "\0\u1932\0\u1988\0\u19de\0\u1a34\0\u1a8a\0\u1ae0\0\u1b36\0\u1b8c"+
    "\0\u1be2\0\u1c38\0\u1c8e\0\u1ce4\0\u1d3a\0\u0662\0\u1d90\0\u070e"+
    "\0\u1de6\0\u0a6a\0\u1e3c\0\u1e92\0\u1ee8\0\u0a6a\0\u0866\0\u1f3e"+
    "\0\u1f94\0\u1fea\0\u2040\0\u2096\0\u20ec\0\u2142\0\u2198\0\u21ee"+
    "\0\u2244\0\u229a\0\u22f0\0\u2346\0\u239c\0\u23f2\0\u2448\0\u025a"+
    "\0\u249e\0\u24f4\0\u0b16\0\u254a\0\u0c6e\0\u25a0\0\u25f6\0\u0b6c"+
    "\0\u264c\0\u26a2\0\u0b16\0\u26f8\0\u274e\0\u0f1e\0\u025a\0\u0f74"+
    "\0\u025a\0\u27a4\0\u27fa\0\u2850\0\u28a6\0\u0b6c\0\u28fc\0\u2952"+
    "\0\u29a8\0\u29fe\0\u2a54\0\u2aaa\0\u2b00\0\u2b56\0\u2bac\0\u2c02"+
    "\0\u2c58\0\u2cae\0\u2d04\0\u025a\0\u025a\0\u025a\0\u025a\0\u025a"+
    "\0\u025a\0\u025a\0\u025a\0\u2d5a\0\u2db0\0\u2e06\0\u2e5c\0\u2eb2"+
    "\0\u2f08\0\u2f5e\0\u2fb4\0\u300a\0\u3060\0\u30b6\0\u310c\0\u3162"+
    "\0\u31b8\0\u320e\0\u3264\0\u1c8e\0\u0408\0\u32ba\0\u3310\0\u3366"+
    "\0\u33bc\0\u3412\0\u3468\0\u34be\0\u3514\0\u356a\0\u35c0\0\u3616"+
    "\0\u366c\0\u36c2\0\u3718\0\u376e\0\u37c4\0\u381a\0\u239c\0\u0810"+
    "\0\u025a\0\u3870\0\u38c6\0\u391c\0\u3972\0\u39c8\0\u3a1e\0\u3a74"+
    "\0\u025a\0\u3aca\0\u3b20\0\u3b76\0\u3bcc\0\u3c22\0\u3c78\0\u3cce"+
    "\0\u3d24\0\u3d7a\0\u3dd0\0\u3e26\0\u3e7c\0\u3ed2\0\u045e\0\u3f28"+
    "\0\u3f7e\0\u18dc\0\u3fd4\0\u18dc\0\u402a\0\u18dc\0\u4080\0\u40d6"+
    "\0\u412c\0\u4182\0\u41d8\0\u0866\0\u422e\0\u4284\0\u1fea\0\u42da"+
    "\0\u1fea\0\u4330\0\u1fea\0\u4386\0\u43dc\0\u4432\0\u4488\0\u44de"+
    "\0\u4534\0\u458a\0\u45e0\0\u4636\0\u468c\0\u025a\0\u46e2\0\u4738"+
    "\0\u478e\0\u47e4\0\u483a\0\u4890\0\u48e6\0\u412c\0\u32ba\0\u493c"+
    "\0\u4992\0\u49e8\0\u4a3e\0\u4a94\0\u4aea\0\u4432\0\u3870\0\u4b40"+
    "\0\u4b96\0\u4bec\0\u4c42\0\u4c98\0\u4cee\0\u4d44\0\u18dc\0\u4d9a"+
    "\0\u4df0\0\u4e46\0\u4e9c\0\u1fea\0\u4ef2\0\u4f48\0\u0b6c\0\u4f9e"+
    "\0\u4ff4\0\u504a\0\u50a0\0\u50f6\0\u514c\0\u51a2\0\u51f8\0\u524e"+
    "\0\u52a4\0\u52fa\0\u0b6c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\0\2\11\2\12\1\13\1\14\1\10\2\15"+
    "\1\16\1\17\1\20\1\15\1\21\1\15\1\22\2\15"+
    "\1\23\2\15\2\16\1\15\1\16\2\15\4\10\3\15"+
    "\1\24\1\10\31\15\1\25\6\15\3\16\15\10\1\26"+
    "\1\0\2\11\1\27\1\12\1\13\1\30\1\26\2\31"+
    "\1\32\1\33\1\34\1\31\1\35\1\31\1\36\2\31"+
    "\1\37\2\31\2\32\1\31\1\32\2\31\4\26\3\31"+
    "\1\24\1\40\31\31\1\41\6\31\3\32\15\26\1\10"+
    "\1\0\2\11\2\12\1\13\1\42\1\43\1\44\1\45"+
    "\1\10\1\46\1\47\1\50\1\51\1\50\2\45\1\52"+
    "\2\45\1\53\2\54\1\45\1\55\1\45\1\56\1\57"+
    "\1\60\1\61\1\10\3\62\2\10\1\63\1\64\1\45"+
    "\1\65\1\66\1\45\1\67\1\45\1\67\1\45\1\70"+
    "\1\71\1\72\1\73\1\45\1\74\3\45\1\75\2\45"+
    "\1\76\4\45\1\77\1\100\1\101\1\102\1\45\3\54"+
    "\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\113\1\114\1\115\1\116\1\117\1\10\1\0\2\11"+
    "\2\12\1\13\1\14\116\10\4\0\2\120\120\0\1\6"+
    "\3\0\1\6\1\0\120\6\7\0\1\121\246\0\2\11"+
    "\122\0\1\122\1\0\2\11\2\12\120\122\2\13\2\0"+
    "\122\13\7\0\1\13\1\123\126\0\10\15\1\22\2\15"+
    "\1\23\10\15\4\0\3\15\1\0\1\124\43\15\26\0"+
    "\10\125\1\126\2\125\1\127\10\125\4\0\3\125\1\0"+
    "\1\124\43\125\26\0\11\130\1\131\2\130\1\132\7\130"+
    "\4\0\3\130\1\0\1\124\1\133\1\134\1\130\1\135"+
    "\1\136\5\130\1\137\1\130\1\140\4\130\1\141\2\130"+
    "\1\142\16\130\26\0\5\15\1\143\2\15\1\22\2\15"+
    "\1\23\10\15\4\0\3\15\1\0\1\124\43\15\26\0"+
    "\7\15\1\143\1\22\2\15\1\23\10\15\4\0\3\15"+
    "\1\0\1\124\43\15\26\0\10\15\1\22\1\144\1\15"+
    "\1\23\10\15\4\0\3\15\1\0\1\124\43\15\26\0"+
    "\10\15\1\22\2\15\1\23\1\145\7\15\4\0\3\15"+
    "\1\0\1\124\43\15\26\0\24\146\4\0\3\146\2\0"+
    "\43\146\26\0\10\15\1\22\2\15\1\23\10\15\4\0"+
    "\3\15\1\0\1\124\31\15\1\147\11\15\15\0\1\150"+
    "\3\0\1\150\2\0\1\151\34\150\1\0\1\152\60\150"+
    "\1\153\1\0\2\11\1\27\1\12\1\122\1\154\34\153"+
    "\1\122\1\155\60\153\1\150\3\0\1\150\2\0\1\13"+
    "\1\123\33\150\1\0\1\152\61\150\3\0\1\150\2\0"+
    "\1\151\1\150\10\31\1\36\2\31\1\37\10\31\4\150"+
    "\3\31\1\0\1\156\43\31\16\150\3\0\1\150\2\0"+
    "\1\151\1\150\10\157\1\160\2\157\1\161\10\157\4\150"+
    "\3\157\1\0\1\156\43\157\16\150\3\0\1\150\2\0"+
    "\1\151\1\150\11\162\1\163\2\162\1\164\7\162\4\150"+
    "\3\162\1\0\1\156\1\165\1\166\1\162\1\167\1\170"+
    "\5\162\1\171\1\162\1\172\4\162\1\173\2\162\1\174"+
    "\16\162\16\150\3\0\1\150\2\0\1\151\1\150\5\31"+
    "\1\175\2\31\1\36\2\31\1\37\10\31\4\150\3\31"+
    "\1\0\1\156\43\31\16\150\3\0\1\150\2\0\1\151"+
    "\1\150\7\31\1\175\1\36\2\31\1\37\10\31\4\150"+
    "\3\31\1\0\1\156\43\31\16\150\3\0\1\150\2\0"+
    "\1\151\1\150\10\31\1\36\1\176\1\31\1\37\10\31"+
    "\4\150\3\31\1\0\1\156\43\31\16\150\3\0\1\150"+
    "\2\0\1\151\1\150\10\31\1\36\2\31\1\37\1\177"+
    "\7\31\4\150\3\31\1\0\1\156\43\31\16\150\2\200"+
    "\1\201\1\150\1\200\1\0\1\151\34\150\1\0\1\152"+
    "\61\150\3\0\1\150\2\0\1\151\1\150\10\31\1\36"+
    "\2\31\1\37\10\31\4\150\3\31\1\0\1\156\31\31"+
    "\1\202\11\31\15\150\15\0\1\203\1\0\1\203\7\0"+
    "\4\203\1\0\1\203\12\0\1\203\2\0\1\203\5\0"+
    "\4\203\1\0\1\203\12\0\1\203\5\0\3\203\26\0"+
    "\1\46\2\45\1\46\20\45\4\0\3\45\2\0\43\45"+
    "\26\0\24\46\4\0\3\46\2\0\43\46\26\0\1\46"+
    "\2\45\1\46\20\45\4\0\3\45\2\0\37\45\1\204"+
    "\3\45\26\0\1\46\2\45\1\46\12\45\2\205\1\45"+
    "\1\205\2\45\4\0\3\45\2\0\40\45\3\205\26\0"+
    "\1\46\2\45\1\46\20\45\4\0\1\45\1\206\1\45"+
    "\2\0\43\45\26\0\1\46\2\45\1\46\17\45\1\207"+
    "\4\0\3\45\2\0\32\45\1\210\10\45\26\0\1\46"+
    "\2\45\1\46\14\45\1\210\3\45\4\0\3\45\2\0"+
    "\17\45\1\211\23\45\44\0\2\54\1\0\1\54\53\0"+
    "\3\54\45\0\1\212\1\0\1\212\1\213\5\0\1\213"+
    "\44\0\3\212\26\0\1\46\2\45\1\46\1\214\17\45"+
    "\4\0\3\45\2\0\43\45\15\0\35\215\1\0\70\215"+
    "\36\216\1\217\67\216\40\220\1\221\65\220\11\0\1\46"+
    "\2\45\1\46\20\45\4\0\3\45\2\0\2\45\1\222"+
    "\40\45\26\0\1\46\2\45\1\46\16\45\1\223\1\45"+
    "\4\0\3\45\2\0\43\45\26\0\1\46\2\45\1\46"+
    "\20\45\4\0\3\45\2\0\5\45\1\224\35\45\26\0"+
    "\1\46\2\45\1\46\20\45\4\0\1\225\2\45\2\0"+
    "\43\45\26\0\1\46\2\45\1\46\20\45\4\0\3\45"+
    "\2\0\42\45\1\226\26\0\1\46\2\45\1\46\20\45"+
    "\4\0\3\45\2\0\1\45\1\227\41\45\26\0\1\46"+
    "\2\45\1\46\1\45\1\230\16\45\4\0\3\45\2\0"+
    "\43\45\26\0\1\46\2\45\1\46\20\45\4\0\3\45"+
    "\2\0\4\45\1\231\36\45\26\0\1\46\2\45\1\46"+
    "\3\45\1\232\14\45\4\0\3\45\2\0\43\45\26\0"+
    "\1\46\2\45\1\46\2\45\1\233\15\45\4\0\3\45"+
    "\2\0\43\45\26\0\1\46\2\45\1\46\20\45\4\0"+
    "\3\45\2\0\22\45\1\234\20\45\26\0\1\46\2\45"+
    "\1\46\20\45\4\0\3\45\2\0\25\45\1\235\15\45"+
    "\26\0\1\46\2\45\1\46\20\45\4\0\3\45\2\0"+
    "\21\45\1\236\5\45\1\237\13\45\26\0\1\46\2\45"+
    "\1\46\20\45\4\0\3\45\2\0\24\45\1\240\3\45"+
    "\1\241\12\45\26\0\1\46\2\45\1\46\20\45\4\0"+
    "\3\45\2\0\21\45\1\236\1\45\1\242\17\45\26\0"+
    "\1\46\2\45\1\46\20\45\4\0\3\45\2\0\24\45"+
    "\1\240\1\45\1\243\14\45\134\0\1\244\123\0\1\245"+
    "\1\0\1\246\124\0\1\247\1\250\125\0\1\251\126\0"+
    "\1\252\127\0\1\253\13\0\1\254\115\0\1\122\3\0"+
    "\1\122\1\0\120\122\10\123\1\255\115\123\11\0\10\125"+
    "\1\126\1\256\1\125\1\127\10\125\4\0\3\125\1\0"+
    "\1\124\43\125\26\0\10\125\1\126\2\125\1\127\1\257"+
    "\7\125\4\0\3\125\1\0\1\124\43\125\26\0\24\130"+
    "\4\0\3\130\1\0\1\124\43\130\26\0\24\130\4\0"+
    "\3\130\1\0\1\124\1\130\1\260\41\130\26\0\24\130"+
    "\4\0\3\130\1\0\1\124\4\130\1\261\36\130\26\0"+
    "\24\130\4\0\3\130\1\0\1\124\1\130\1\262\41\130"+
    "\26\0\5\130\1\263\16\130\4\0\3\130\1\0\1\124"+
    "\6\130\1\264\34\130\26\0\24\130\4\0\3\130\1\0"+
    "\1\124\4\130\1\265\36\130\26\0\7\130\1\266\14\130"+
    "\4\0\3\130\1\0\1\124\10\130\1\267\32\130\26\0"+
    "\24\130\4\0\3\130\1\0\1\124\1\130\1\270\41\130"+
    "\26\0\24\130\4\0\3\130\1\0\1\124\4\130\1\271"+
    "\36\130\26\0\23\130\1\272\4\0\3\130\1\0\1\124"+
    "\43\130\26\0\24\130\4\0\3\130\1\0\1\124\17\130"+
    "\1\273\23\130\26\0\24\274\4\0\3\274\1\0\1\124"+
    "\43\274\26\0\10\15\1\22\1\15\1\275\1\23\10\15"+
    "\4\0\3\15\1\0\1\124\43\15\26\0\10\15\1\22"+
    "\2\15\1\23\1\15\1\275\6\15\4\0\3\15\1\0"+
    "\1\124\43\15\26\0\10\276\1\277\2\276\1\300\10\276"+
    "\4\0\3\276\1\0\1\124\43\276\15\0\1\150\3\0"+
    "\1\150\4\0\33\150\1\0\1\152\60\150\1\153\3\0"+
    "\1\153\1\0\1\122\1\154\34\153\1\122\1\155\61\153"+
    "\3\0\1\153\1\0\3\122\33\153\1\122\1\155\61\153"+
    "\2\200\1\201\1\153\1\200\1\122\1\154\34\153\1\122"+
    "\1\155\60\153\1\150\3\0\1\150\2\0\1\151\1\150"+
    "\10\157\1\160\1\301\1\157\1\161\10\157\4\150\3\157"+
    "\1\0\1\156\43\157\16\150\3\0\1\150\2\0\1\151"+
    "\1\150\10\157\1\160\2\157\1\161\1\302\7\157\4\150"+
    "\3\157\1\0\1\156\43\157\16\150\3\0\1\150\2\0"+
    "\1\151\1\150\24\162\4\150\3\162\1\0\1\156\43\162"+
    "\16\150\3\0\1\150\2\0\1\151\1\150\24\162\4\150"+
    "\3\162\1\0\1\156\1\162\1\303\41\162\16\150\3\0"+
    "\1\150\2\0\1\151\1\150\24\162\4\150\3\162\1\0"+
    "\1\156\4\162\1\304\36\162\16\150\3\0\1\150\2\0"+
    "\1\151\1\150\24\162\4\150\3\162\1\0\1\156\1\162"+
    "\1\305\41\162\16\150\3\0\1\150\2\0\1\151\1\150"+
    "\5\162\1\306\16\162\4\150\3\162\1\0\1\156\6\162"+
    "\1\307\34\162\16\150\3\0\1\150\2\0\1\151\1\150"+
    "\24\162\4\150\3\162\1\0\1\156\4\162\1\310\36\162"+
    "\16\150\3\0\1\150\2\0\1\151\1\150\7\162\1\311"+
    "\14\162\4\150\3\162\1\0\1\156\10\162\1\312\32\162"+
    "\16\150\3\0\1\150\2\0\1\151\1\150\24\162\4\150"+
    "\3\162\1\0\1\156\1\162\1\313\41\162\16\150\3\0"+
    "\1\150\2\0\1\151\1\150\24\162\4\150\3\162\1\0"+
    "\1\156\4\162\1\314\36\162\16\150\3\0\1\150\2\0"+
    "\1\151\1\150\23\162\1\315\4\150\3\162\1\0\1\156"+
    "\43\162\16\150\3\0\1\150\2\0\1\151\1\150\24\162"+
    "\4\150\3\162\1\0\1\156\17\162\1\316\23\162\16\150"+
    "\3\0\1\150\2\0\1\151\1\150\24\317\4\150\3\317"+
    "\1\0\1\156\43\317\16\150\3\0\1\150\2\0\1\151"+
    "\1\150\10\31\1\36\1\31\1\320\1\37\10\31\4\150"+
    "\3\31\1\0\1\156\43\31\16\150\3\0\1\150\2\0"+
    "\1\151\1\150\10\31\1\36\2\31\1\37\1\31\1\320"+
    "\6\31\4\150\3\31\1\0\1\156\43\31\15\150\2\0"+
    "\1\321\123\0\1\150\3\0\1\150\2\0\1\151\1\150"+
    "\10\322\1\323\2\322\1\324\10\322\4\150\3\322\1\0"+
    "\1\156\43\322\15\150\11\0\1\46\2\45\1\46\20\45"+
    "\4\0\3\45\2\0\2\45\1\325\40\45\26\0\1\46"+
    "\2\45\1\46\20\45\4\0\3\45\2\0\5\45\1\326"+
    "\35\45\26\0\1\46\2\45\1\46\20\45\4\0\3\45"+
    "\2\0\16\45\1\327\24\45\26\0\1\46\2\45\1\46"+
    "\20\45\4\0\3\45\2\0\20\45\1\330\22\45\45\0"+
    "\1\212\1\0\1\212\53\0\3\212\26\0\1\46\2\45"+
    "\1\46\20\45\4\0\3\45\2\0\1\226\42\45\52\0"+
    "\1\331\101\0\1\46\2\45\1\46\1\45\1\332\16\45"+
    "\4\0\3\45\2\0\43\45\26\0\1\46\2\45\1\46"+
    "\6\45\1\333\11\45\4\0\3\45\2\0\43\45\26\0"+
    "\1\46\2\45\1\46\3\45\1\334\14\45\4\0\3\45"+
    "\2\0\43\45\26\0\1\46\2\45\1\46\11\45\1\333"+
    "\6\45\4\0\3\45\2\0\43\45\26\0\1\46\2\45"+
    "\1\46\20\45\4\0\3\45\2\0\13\45\1\335\27\45"+
    "\26\0\1\46\2\45\1\46\17\45\1\336\4\0\3\45"+
    "\2\0\43\45\26\0\1\46\2\45\1\46\20\45\4\0"+
    "\3\45\2\0\15\45\1\337\25\45\26\0\1\46\2\45"+
    "\1\46\20\45\4\0\3\45\2\0\17\45\1\340\23\45"+
    "\26\0\1\46\2\45\1\46\20\45\4\0\3\45\2\0"+
    "\3\45\1\226\37\45\26\0\1\46\2\45\1\46\20\45"+
    "\4\0\3\45\2\0\2\45\1\226\40\45\26\0\1\46"+
    "\2\45\1\46\20\45\4\0\3\45\2\0\5\45\1\226"+
    "\35\45\26\0\1\46\2\45\1\46\1\45\1\341\16\45"+
    "\4\0\3\45\2\0\43\45\26\0\1\46\2\45\1\46"+
    "\20\45\4\0\3\45\2\0\16\45\1\333\2\45\1\226"+
    "\21\45\26\0\1\46\2\45\1\46\3\45\1\342\14\45"+
    "\4\0\3\45\2\0\43\45\26\0\1\46\2\45\1\46"+
    "\20\45\4\0\3\45\2\0\20\45\1\333\3\45\1\226"+
    "\16\45\26\0\1\46\2\45\1\46\20\45\4\0\3\45"+
    "\2\0\16\45\1\343\24\45\26\0\1\46\2\45\1\46"+
    "\20\45\4\0\3\45\2\0\20\45\1\344\22\45\15\0"+
    "\10\254\1\345\115\254\7\123\1\346\116\123\11\0\10\125"+
    "\1\126\1\125\1\347\1\127\10\125\4\0\3\125\1\0"+
    "\1\124\43\125\26\0\10\125\1\126\2\125\1\127\1\125"+
    "\1\347\6\125\4\0\3\125\1\0\1\124\43\125\26\0"+
    "\24\130\4\0\3\130\1\0\1\124\1\350\42\130\26\0"+
    "\24\130\4\0\3\130\1\0\1\124\3\130\1\351\37\130"+
    "\26\0\24\130\4\0\3\130\1\0\1\124\2\130\1\352"+
    "\40\130\26\0\5\130\1\353\16\130\4\0\3\130\1\0"+
    "\1\124\43\130\26\0\24\130\4\0\3\130\1\0\1\124"+
    "\7\130\1\354\33\130\26\0\24\130\4\0\3\130\1\0"+
    "\1\124\5\130\1\352\35\130\26\0\7\130\1\355\14\130"+
    "\4\0\3\130\1\0\1\124\43\130\26\0\24\130\4\0"+
    "\3\130\1\0\1\124\11\130\1\354\31\130\26\0\24\130"+
    "\4\0\3\130\1\0\1\124\13\130\1\356\27\130\26\0"+
    "\24\130\4\0\3\130\1\0\1\124\15\130\1\356\25\130"+
    "\26\0\5\130\1\357\16\130\4\0\3\130\1\0\1\124"+
    "\43\130\26\0\7\130\1\360\14\130\4\0\3\130\1\0"+
    "\1\124\43\130\26\0\10\276\1\277\2\276\1\300\10\276"+
    "\4\0\3\276\1\0\1\124\31\276\1\361\11\276\26\0"+
    "\10\276\1\277\1\362\1\276\1\300\10\276\4\0\3\276"+
    "\1\0\1\124\31\276\1\361\11\276\26\0\10\276\1\277"+
    "\2\276\1\300\1\363\7\276\4\0\3\276\1\0\1\124"+
    "\31\276\1\361\11\276\15\0\1\150\3\0\1\150\2\0"+
    "\1\151\1\150\10\157\1\160\1\157\1\364\1\161\10\157"+
    "\4\150\3\157\1\0\1\156\43\157\16\150\3\0\1\150"+
    "\2\0\1\151\1\150\10\157\1\160\2\157\1\161\1\157"+
    "\1\364\6\157\4\150\3\157\1\0\1\156\43\157\16\150"+
    "\3\0\1\150\2\0\1\151\1\150\24\162\4\150\3\162"+
    "\1\0\1\156\1\365\42\162\16\150\3\0\1\150\2\0"+
    "\1\151\1\150\24\162\4\150\3\162\1\0\1\156\3\162"+
    "\1\366\37\162\16\150\3\0\1\150\2\0\1\151\1\150"+
    "\24\162\4\150\3\162\1\0\1\156\2\162\1\367\40\162"+
    "\16\150\3\0\1\150\2\0\1\151\1\150\5\162\1\370"+
    "\16\162\4\150\3\162\1\0\1\156\43\162\16\150\3\0"+
    "\1\150\2\0\1\151\1\150\24\162\4\150\3\162\1\0"+
    "\1\156\7\162\1\371\33\162\16\150\3\0\1\150\2\0"+
    "\1\151\1\150\24\162\4\150\3\162\1\0\1\156\5\162"+
    "\1\367\35\162\16\150\3\0\1\150\2\0\1\151\1\150"+
    "\7\162\1\372\14\162\4\150\3\162\1\0\1\156\43\162"+
    "\16\150\3\0\1\150\2\0\1\151\1\150\24\162\4\150"+
    "\3\162\1\0\1\156\11\162\1\371\31\162\16\150\3\0"+
    "\1\150\2\0\1\151\1\150\24\162\4\150\3\162\1\0"+
    "\1\156\13\162\1\373\27\162\16\150\3\0\1\150\2\0"+
    "\1\151\1\150\24\162\4\150\3\162\1\0\1\156\15\162"+
    "\1\373\25\162\16\150\3\0\1\150\2\0\1\151\1\150"+
    "\5\162\1\374\16\162\4\150\3\162\1\0\1\156\43\162"+
    "\16\150\3\0\1\150\2\0\1\151\1\150\7\162\1\375"+
    "\14\162\4\150\3\162\1\0\1\156\43\162\16\150\3\0"+
    "\1\150\2\0\1\151\1\150\10\322\1\323\2\322\1\324"+
    "\10\322\4\150\3\322\1\0\1\156\31\322\1\376\11\322"+
    "\16\150\3\0\1\150\2\0\1\151\1\150\10\322\1\323"+
    "\1\377\1\322\1\324\10\322\4\150\3\322\1\0\1\156"+
    "\31\322\1\376\11\322\16\150\3\0\1\150\2\0\1\151"+
    "\1\150\10\322\1\323\2\322\1\324\1\u0100\7\322\4\150"+
    "\3\322\1\0\1\156\31\322\1\376\11\322\15\150\11\0"+
    "\1\46\2\45\1\46\20\45\4\0\3\45\2\0\1\45"+
    "\1\u0101\41\45\26\0\1\46\2\45\1\46\20\45\4\0"+
    "\3\45\2\0\4\45\1\u0101\36\45\26\0\1\46\2\45"+
    "\1\46\20\45\4\0\3\45\2\0\1\45\1\226\41\45"+
    "\26\0\1\46\2\45\1\46\20\45\4\0\3\45\2\0"+
    "\4\45\1\226\36\45\26\0\1\46\2\45\1\46\20\45"+
    "\4\0\3\45\2\0\33\45\1\u0102\7\45\26\0\1\46"+
    "\2\45\1\46\20\45\4\0\3\45\2\0\41\45\1\226"+
    "\1\45\26\0\1\46\2\45\1\46\20\45\4\0\3\45"+
    "\2\0\34\45\1\u0103\6\45\26\0\1\46\2\45\1\46"+
    "\20\45\4\0\3\45\2\0\23\45\1\u0104\17\45\26\0"+
    "\1\46\2\45\1\46\20\45\4\0\3\45\2\0\32\45"+
    "\1\226\10\45\26\0\1\46\2\45\1\46\20\45\4\0"+
    "\3\45\2\0\26\45\1\u0105\14\45\26\0\1\46\2\45"+
    "\1\46\14\45\1\226\3\45\4\0\3\45\2\0\43\45"+
    "\26\0\1\46\2\45\1\46\20\45\4\0\3\45\2\0"+
    "\12\45\1\226\30\45\26\0\1\46\2\45\1\46\20\45"+
    "\4\0\3\45\2\0\14\45\1\226\26\45\26\0\1\46"+
    "\2\45\1\46\20\45\4\0\3\45\2\0\35\45\1\226"+
    "\5\45\26\0\1\46\2\45\1\46\20\45\4\0\3\45"+
    "\2\0\36\45\1\226\4\45\15\0\7\254\1\u0106\1\u0107"+
    "\115\254\1\346\3\0\1\346\1\0\120\346\11\0\24\130"+
    "\4\0\3\130\1\0\1\124\1\u0108\42\130\26\0\24\130"+
    "\4\0\3\130\1\0\1\124\3\130\1\u0109\37\130\26\0"+
    "\24\130\4\0\3\130\1\0\1\124\27\130\1\u010a\13\130"+
    "\26\0\24\130\4\0\3\130\1\0\1\124\30\130\1\u010b"+
    "\12\130\26\0\24\130\4\0\3\130\1\0\1\124\22\130"+
    "\1\u010c\20\130\26\0\24\130\4\0\3\130\1\0\1\124"+
    "\25\130\1\u010d\15\130\26\0\10\276\1\277\2\276\1\300"+
    "\10\276\4\0\3\276\1\0\1\124\31\276\1\u010e\11\276"+
    "\26\0\10\276\1\277\1\276\1\u010f\1\300\10\276\4\0"+
    "\3\276\1\0\1\124\31\276\1\361\11\276\26\0\10\276"+
    "\1\277\2\276\1\300\1\276\1\u010f\6\276\4\0\3\276"+
    "\1\0\1\124\31\276\1\361\11\276\15\0\1\150\3\0"+
    "\1\150\2\0\1\151\1\150\24\162\4\150\3\162\1\0"+
    "\1\156\1\u0110\42\162\16\150\3\0\1\150\2\0\1\151"+
    "\1\150\24\162\4\150\3\162\1\0\1\156\3\162\1\u0111"+
    "\37\162\16\150\3\0\1\150\2\0\1\151\1\150\24\162"+
    "\4\150\3\162\1\0\1\156\27\162\1\u0112\13\162\16\150"+
    "\3\0\1\150\2\0\1\151\1\150\24\162\4\150\3\162"+
    "\1\0\1\156\30\162\1\u0113\12\162\16\150\3\0\1\150"+
    "\2\0\1\151\1\150\24\162\4\150\3\162\1\0\1\156"+
    "\22\162\1\u0114\20\162\16\150\3\0\1\150\2\0\1\151"+
    "\1\150\24\162\4\150\3\162\1\0\1\156\25\162\1\u0115"+
    "\15\162\16\150\3\0\1\150\2\0\1\151\1\150\10\322"+
    "\1\323\2\322\1\324\10\322\4\150\3\322\1\0\1\156"+
    "\31\322\1\u0116\11\322\16\150\3\0\1\150\2\0\1\151"+
    "\1\150\10\322\1\323\1\322\1\u0117\1\324\10\322\4\150"+
    "\3\322\1\0\1\156\31\322\1\376\11\322\16\150\3\0"+
    "\1\150\2\0\1\151\1\150\10\322\1\323\2\322\1\324"+
    "\1\322\1\u0117\6\322\4\150\3\322\1\0\1\156\31\322"+
    "\1\376\11\322\15\150\11\0\1\46\2\45\1\46\20\45"+
    "\4\0\3\45\2\0\40\45\1\226\2\45\26\0\1\46"+
    "\2\45\1\46\20\45\4\0\3\45\2\0\1\45\1\u0118"+
    "\41\45\26\0\1\46\2\45\1\46\20\45\4\0\3\45"+
    "\2\0\4\45\1\u0119\36\45\26\0\1\46\2\45\1\46"+
    "\20\45\4\0\3\45\2\0\22\45\1\u011a\20\45\26\0"+
    "\1\46\2\45\1\46\20\45\4\0\3\45\2\0\25\45"+
    "\1\u011b\15\45\15\0\7\254\1\u011c\1\345\115\254\11\0"+
    "\23\130\1\u011d\4\0\3\130\1\0\1\124\43\130\26\0"+
    "\24\130\4\0\3\130\1\0\1\124\17\130\1\u011e\23\130"+
    "\26\0\5\130\1\u011f\16\130\4\0\3\130\1\0\1\124"+
    "\43\130\26\0\7\130\1\u011f\14\130\4\0\3\130\1\0"+
    "\1\124\43\130\26\0\24\130\4\0\3\130\1\0\1\124"+
    "\23\130\1\u0120\17\130\26\0\24\130\4\0\3\130\1\0"+
    "\1\124\26\130\1\u0121\14\130\15\0\1\150\3\0\1\150"+
    "\2\0\1\151\1\150\23\162\1\u0122\4\150\3\162\1\0"+
    "\1\156\43\162\16\150\3\0\1\150\2\0\1\151\1\150"+
    "\24\162\4\150\3\162\1\0\1\156\17\162\1\u0123\23\162"+
    "\16\150\3\0\1\150\2\0\1\151\1\150\5\162\1\u0124"+
    "\16\162\4\150\3\162\1\0\1\156\43\162\16\150\3\0"+
    "\1\150\2\0\1\151\1\150\7\162\1\u0124\14\162\4\150"+
    "\3\162\1\0\1\156\43\162\16\150\3\0\1\150\2\0"+
    "\1\151\1\150\24\162\4\150\3\162\1\0\1\156\23\162"+
    "\1\u0125\17\162\16\150\3\0\1\150\2\0\1\151\1\150"+
    "\24\162\4\150\3\162\1\0\1\156\26\162\1\u0126\14\162"+
    "\15\150\11\0\1\46\2\45\1\46\20\45\4\0\3\45"+
    "\2\0\22\45\1\u0127\20\45\26\0\1\46\2\45\1\46"+
    "\20\45\4\0\3\45\2\0\25\45\1\u0127\15\45\26\0"+
    "\1\46\2\45\1\46\20\45\4\0\3\45\2\0\1\45"+
    "\1\u0128\41\45\26\0\1\46\2\45\1\46\20\45\4\0"+
    "\3\45\2\0\4\45\1\u0129\36\45\15\0\10\u011c\1\u012a"+
    "\115\u011c\11\0\24\130\4\0\3\130\1\0\1\124\16\130"+
    "\1\u012b\24\130\26\0\24\130\4\0\3\130\1\0\1\124"+
    "\20\130\1\u012c\22\130\26\0\24\130\4\0\3\130\1\0"+
    "\1\124\22\130\1\u012d\20\130\26\0\24\130\4\0\3\130"+
    "\1\0\1\124\25\130\1\u012e\15\130\15\0\1\150\3\0"+
    "\1\150\2\0\1\151\1\150\24\162\4\150\3\162\1\0"+
    "\1\156\16\162\1\u012f\24\162\16\150\3\0\1\150\2\0"+
    "\1\151\1\150\24\162\4\150\3\162\1\0\1\156\20\162"+
    "\1\u0130\22\162\16\150\3\0\1\150\2\0\1\151\1\150"+
    "\24\162\4\150\3\162\1\0\1\156\22\162\1\u0131\20\162"+
    "\16\150\3\0\1\150\2\0\1\151\1\150\24\162\4\150"+
    "\3\162\1\0\1\156\25\162\1\u0132\15\162\15\150\11\0"+
    "\1\46\2\45\1\46\20\45\4\0\3\45\2\0\12\45"+
    "\1\u0133\30\45\26\0\1\46\2\45\1\46\20\45\4\0"+
    "\3\45\2\0\14\45\1\u0133\26\45\15\0\7\u011c\1\0"+
    "\116\u011c\11\0\24\130\4\0\3\130\1\0\1\124\1\130"+
    "\1\u011f\41\130\26\0\24\130\4\0\3\130\1\0\1\124"+
    "\4\130\1\u011f\36\130\26\0\24\130\4\0\3\130\1\0"+
    "\1\124\16\130\1\u011f\24\130\26\0\24\130\4\0\3\130"+
    "\1\0\1\124\20\130\1\u011f\22\130\15\0\1\150\3\0"+
    "\1\150\2\0\1\151\1\150\24\162\4\150\3\162\1\0"+
    "\1\156\1\162\1\u0124\41\162\16\150\3\0\1\150\2\0"+
    "\1\151\1\150\24\162\4\150\3\162\1\0\1\156\4\162"+
    "\1\u0124\36\162\16\150\3\0\1\150\2\0\1\151\1\150"+
    "\24\162\4\150\3\162\1\0\1\156\16\162\1\u0124\24\162"+
    "\16\150\3\0\1\150\2\0\1\151\1\150\24\162\4\150"+
    "\3\162\1\0\1\156\20\162\1\u0124\22\162\15\150";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21328];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\1\1\0\1\11\32\1\1\11\40\1\3\11"+
    "\4\1\1\11\1\1\3\11\1\1\1\0\2\1\1\11"+
    "\3\0\20\1\3\0\4\1\3\0\16\1\1\11\12\1"+
    "\1\0\1\1\2\0\1\11\1\0\1\11\22\1\10\11"+
    "\2\1\2\0\21\1\2\0\16\1\1\11\7\1\1\11"+
    "\13\1\1\0\40\1\1\11\43\1\1\0\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AvrAsmLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 52: break;
          case 2: 
            { yybegin(YYINITIAL);      return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 53: break;
          case 3: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 4;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 5;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 54: break;
          case 4: 
            { yybegin(YYINITIAL);      return AvrAsmTypes.LINE_COMMENT;
            } 
            // fall through
          case 55: break;
          case 5: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.MNEMONIC;
            } 
            // fall through
          case 56: break;
          case 6: 
            { return AvrAsmTypes.DIVISION;
            } 
            // fall through
          case 57: break;
          case 7: 
            { return AvrAsmTypes.STAR;
            } 
            // fall through
          case 58: break;
          case 8: 
            { return AvrAsmTypes.IDENTIFIER;
            } 
            // fall through
          case 59: break;
          case 9: 
            { return AvrAsmTypes.SYMBOL_IDENTIFIER;
            } 
            // fall through
          case 60: break;
          case 10: 
            { return AvrAsmTypes.INTEGER;
            } 
            // fall through
          case 61: break;
          case 11: 
            { return AvrAsmTypes.INDIRECT;
            } 
            // fall through
          case 62: break;
          case 12: 
            { return AvrAsmTypes.NOT;
            } 
            // fall through
          case 63: break;
          case 13: 
            { return AvrAsmTypes.TILDA;
            } 
            // fall through
          case 64: break;
          case 14: 
            { return AvrAsmTypes.PLUS;
            } 
            // fall through
          case 65: break;
          case 15: 
            { return AvrAsmTypes.MINUS;
            } 
            // fall through
          case 66: break;
          case 16: 
            { return AvrAsmTypes.LESS;
            } 
            // fall through
          case 67: break;
          case 17: 
            { return AvrAsmTypes.GREATER;
            } 
            // fall through
          case 68: break;
          case 18: 
            { return AvrAsmTypes.EQUAL;
            } 
            // fall through
          case 69: break;
          case 19: 
            { return AvrAsmTypes.AND_BIN;
            } 
            // fall through
          case 70: break;
          case 20: 
            { return AvrAsmTypes.XOR_BIN;
            } 
            // fall through
          case 71: break;
          case 21: 
            { return AvrAsmTypes.OR_BIN;
            } 
            // fall through
          case 72: break;
          case 22: 
            { return AvrAsmTypes.COMMA;
            } 
            // fall through
          case 73: break;
          case 23: 
            { return AvrAsmTypes.L_PAREN;
            } 
            // fall through
          case 74: break;
          case 24: 
            { return AvrAsmTypes.R_PAREN;
            } 
            // fall through
          case 75: break;
          case 25: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 6;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 5;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return AvrAsmTypes.BLOCK_COMMENT;
            } 
            // fall through
          case 76: break;
          case 26: 
            { return AvrAsmTypes.LABEL;
            } 
            // fall through
          case 77: break;
          case 27: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.GENERIC_DIRECTIVE;
            } 
            // fall through
          case 78: break;
          case 28: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.PREPROCESSOR_NAME;
            } 
            // fall through
          case 79: break;
          case 29: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return AvrAsmTypes.LABEL;
            } 
            // fall through
          case 80: break;
          case 30: 
            { return AvrAsmTypes.REGISTER;
            } 
            // fall through
          case 81: break;
          case 31: 
            { return AvrAsmTypes.PC;
            } 
            // fall through
          case 82: break;
          case 32: 
            { return AvrAsmTypes.STRING;
            } 
            // fall through
          case 83: break;
          case 33: 
            { return AvrAsmTypes.INJECTED_PARAMETER;
            } 
            // fall through
          case 84: break;
          case 34: 
            { return AvrAsmTypes.FUNC;
            } 
            // fall through
          case 85: break;
          case 35: 
            { return AvrAsmTypes.NOT_EQUAL;
            } 
            // fall through
          case 86: break;
          case 36: 
            { return AvrAsmTypes.SHIFT_LEFT;
            } 
            // fall through
          case 87: break;
          case 37: 
            { return AvrAsmTypes.LESS_EQUAL;
            } 
            // fall through
          case 88: break;
          case 38: 
            { return AvrAsmTypes.SHIFT_RIGHT;
            } 
            // fall through
          case 89: break;
          case 39: 
            { return AvrAsmTypes.GREATER_EQUAL;
            } 
            // fall through
          case 90: break;
          case 40: 
            { return AvrAsmTypes.AND;
            } 
            // fall through
          case 91: break;
          case 41: 
            { return AvrAsmTypes.OR;
            } 
            // fall through
          case 92: break;
          case 42: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.BR_MNEMONIC;
            } 
            // fall through
          case 93: break;
          case 43: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return AvrAsmTypes.LABEL;
            } 
            // fall through
          case 94: break;
          case 44: 
            { return AvrAsmTypes.CHAR;
            } 
            // fall through
          case 95: break;
          case 45: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.SET_DIRECTIVE;
            } 
            // fall through
          case 96: break;
          case 46: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.EQU_DIRECTIVE;
            } 
            // fall through
          case 97: break;
          case 47: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.DEF_DIRECTIVE;
            } 
            // fall through
          case 98: break;
          case 48: 
            { return AvrAsmTypes.MACROS_NAME;
            } 
            // fall through
          case 99: break;
          case 49: 
            { yybegin(IN_OPERANDS);       return AvrAsmTypes.REPORT_DIRECTIVE;
            } 
            // fall through
          case 100: break;
          case 50: 
            { return AvrAsmTypes.STRLEN_FUNC;
            } 
            // fall through
          case 101: break;
          case 51: 
            { return AvrAsmTypes.DEFINED_FUNC;
            } 
            // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
